<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities.DataTypes</name>
    </assembly>
    <members>
        <member name="T:Utilities.DataTypes.Caching.Default.Cache">
            <summary>
            Built in cache
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.Cache.Count">
            <summary>
            The number of items in the cache
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.Cache.Keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.Cache.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.Cache.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.Cache.InternalCache">
            <summary>
            Internal cache
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.Add(System.String,System.Object)">
            <summary>
            Add item to the cache
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines if the item is in the cache
            </summary>
            <param name="item">item to check for</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.ContainsKey(System.String)">
            <summary>
            Checks if the cache contains the key
            </summary>
            <param name="key">Key to check</param>
            <returns>True if it is there, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.Remove(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="key">key to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes an item from an array
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempt to get a value
            </summary>
            <param name="key">Key to get</param>
            <param name="value">Value of the item</param>
            <returns>True if it is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.Cache.Dispose(System.Boolean)">
            <summary>
            Disposes the cache
            </summary>
            <param name="Managed">Managed objects or just unmanaged</param>
        </member>
        <member name="T:Utilities.DataTypes.Caching.Default.CacheCache">
            <summary>
            Cache used in ASP.Net for cache level cache
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.CacheCache.Count">
            <summary>
            The number of items in the cache
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.CacheCache.Keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.CacheCache.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.CacheCache.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.CacheCache.InternalKeys">
            <summary>
            Internal keys
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.Add(System.String,System.Object)">
            <summary>
            Add item to the cache
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines if the item is in the cache
            </summary>
            <param name="item">item to check for</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.ContainsKey(System.String)">
            <summary>
            Checks if the cache contains the key
            </summary>
            <param name="key">Key to check</param>
            <returns>True if it is there, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.Remove(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="key">key to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes an item from an array
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempt to get a value
            </summary>
            <param name="key">Key to get</param>
            <param name="value">Value of the item</param>
            <returns>True if it is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.CacheCache.Dispose(System.Boolean)">
            <summary>
            Disposes of the cache
            </summary>
            <param name="Managed">Managed or not</param>
        </member>
        <member name="T:Utilities.DataTypes.Caching.Default.ItemCache">
            <summary>
            Cache used in ASP.Net for item level cache
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.ItemCache.Count">
            <summary>
            The number of items in the cache
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.ItemCache.Keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.ItemCache.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.ItemCache.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.Add(System.String,System.Object)">
            <summary>
            Add item to the cache
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines if the item is in the cache
            </summary>
            <param name="item">item to check for</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.ContainsKey(System.String)">
            <summary>
            Checks if the cache contains the key
            </summary>
            <param name="key">Key to check</param>
            <returns>True if it is there, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.Remove(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="key">key to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes an item from an array
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempt to get a value
            </summary>
            <param name="key">Key to get</param>
            <param name="value">Value of the item</param>
            <returns>True if it is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.ItemCache.Dispose(System.Boolean)">
            <summary>
            Disposes of the cache
            </summary>
            <param name="Managed">Managed or not</param>
        </member>
        <member name="T:Utilities.DataTypes.Caching.Default.SessionCache">
            <summary>
            Cache used in ASP.Net for session level cache
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.SessionCache.Count">
            <summary>
            The number of items in the cache
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.SessionCache.Keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.SessionCache.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Default.SessionCache.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.Add(System.String,System.Object)">
            <summary>
            Add item to the cache
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines if the item is in the cache
            </summary>
            <param name="item">item to check for</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.ContainsKey(System.String)">
            <summary>
            Checks if the cache contains the key
            </summary>
            <param name="key">Key to check</param>
            <returns>True if it is there, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.Remove(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="key">key to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes an item from an array
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempt to get a value
            </summary>
            <param name="key">Key to get</param>
            <param name="value">Value of the item</param>
            <returns>True if it is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Default.SessionCache.Dispose(System.Boolean)">
            <summary>
            Disposes of the cache
            </summary>
            <param name="Managed">Managed or not</param>
        </member>
        <member name="T:Utilities.DataTypes.Caching.Interfaces.ICache">
            <summary>
            Cache interface
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Interfaces.ICache.Name">
            <summary>
            Cache name
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Interfaces.ICache.Tags">
            <summary>
            The tags used thus far
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Interfaces.ICache.Add(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a value/key combination and assigns tags to it
            </summary>
            <param name="Key">Key to add</param>
            <param name="Tags">Tags to associate with the key/value pair</param>
            <param name="Value">Value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Interfaces.ICache.GetByTag(System.String)">
            <summary>
            Gets the objects associated with a specific tag
            </summary>
            <param name="Tag">Tag to use</param>
            <returns>The objects associated with the tag</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Interfaces.ICache.RemoveByTag(System.String)">
            <summary>
            Removes all items associated with the tag specified
            </summary>
            <param name="Tag">Tag to remove</param>
        </member>
        <member name="T:Utilities.DataTypes.Caching.Manager">
            <summary>
            Caching manager class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Manager.#ctor(System.Collections.Generic.IEnumerable{Utilities.DataTypes.Caching.Interfaces.ICache})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Manager.Caches">
            <summary>
            Caches
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Manager.Cache(System.String)">
            <summary>
            Gets the specified cache
            </summary>
            <param name="Name">Name of the cache (defaults to Default)</param>
            <returns>
            Returns the ICache specified if it exists, otherwise creates a default cache and
            associates it with the name
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Manager.ToString">
            <summary>
            Outputs the manager as a string
            </summary>
            <returns>String version of the manager</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Manager.Dispose(System.Boolean)">
            <summary>
            Disposes of the object
            </summary>
            <param name="Managed">
            Determines if all objects should be disposed or just managed objects
            </param>
        </member>
        <member name="T:Utilities.DataTypes.Caching.Module.CachingModule">
            <summary>
            Caching module
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.Module.CachingModule.Order">
            <summary>
            Order to run it in
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.Module.CachingModule.Load(Utilities.IoC.Interfaces.IBootstrapper)">
            <summary>
            Loads the module
            </summary>
            <param name="Bootstrapper">Bootstrapper to register with</param>
        </member>
        <member name="T:Utilities.DataTypes.Caching.BaseClasses.CacheBase">
            <summary>
            Cache base class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Count">
            <summary>
            The number of items in the cache
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.BaseClasses.CacheBase.IsReadOnly">
            <summary>
            Read only
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Tags">
            <summary>
            The tags used thus far
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.BaseClasses.CacheBase.TagMappings">
            <summary>
            Tag mappings
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Item(System.String)">
            <summary>
            Indexer
            </summary>
            <param name="key">Key</param>
            <returns>The object specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Add(System.String,System.Object)">
            <summary>
            Add item to the cache
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the cache
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Add(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a value/key combination and assigns tags to it
            </summary>
            <param name="Key">Key to add</param>
            <param name="Tags">Tags to associate with the key/value pair</param>
            <param name="Value">Value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines if the item is in the cache
            </summary>
            <param name="item">item to check for</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.ContainsKey(System.String)">
            <summary>
            Checks if the cache contains the key
            </summary>
            <param name="key">Key to check</param>
            <returns>True if it is there, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.GetByTag(System.String)">
            <summary>
            Gets the objects associated with a specific tag
            </summary>
            <param name="Tag">Tag to use</param>
            <returns>The objects associated with the tag</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Remove(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="key">key to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes an item from an array
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.RemoveByTag(System.String)">
            <summary>
            Removes all items associated with the tag specified
            </summary>
            <param name="Tag">Tag to remove</param>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Caching.BaseClasses.CacheBase.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempt to get a value
            </summary>
            <param name="key">Key to get</param>
            <param name="value">Value of the item</param>
            <returns>True if it is found, false otherwise</returns>
        </member>
        <member name="T:Utilities.DataTypes.AI.NaiveBayes`1">
            <summary>
            Naive bayes classifier
            </summary>
            <typeparam name="T">The type of the individual tokens</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.AI.NaiveBayes`1.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="ATokenWeight">Weight of each token in set A</param>
            <param name="BTokenWeight">Weight of each token in set B</param>
            <param name="MaxInterestingTokenCount">
            After sorting, this is the maximum number of tokens that are picked to figure out the
            final probability
            </param>
            <param name="MaxTokenProbability">Maximum token probability</param>
            <param name="MinTokenProbability">Minimum token probability</param>
            <param name="MinCountForInclusion">
            Minimum number of times a token needs to be present for it to be included
            </param>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.ATokenWeight">
            <summary>
            Weight to give to the probabilities in set A
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.BTokenWeight">
            <summary>
            Weight to give the probabilities in set B
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.MaxInterestingTokenCount">
            <summary>
            After sorting, this is the maximum number of tokens that are picked to figure out the
            final probability
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.MaxTokenProbability">
            <summary>
            Maximum token probability (if greater than this amount, it becomes this amount)
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.MinCountForInclusion">
            <summary>
            Minimum count that an item needs to be found to be included in final probability
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.MinTokenProbability">
            <summary>
            Minimum token probability (if less than this amount, it becomes this amount)
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.SetA">
            <summary>
            Set A
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.SetB">
            <summary>
            Set B
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.Probabilities">
            <summary>
            Dictionary containing probabilities
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.Total">
            <summary>
            Total number of tokens
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.TotalA">
            <summary>
            Total number of tokens in set A
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AI.NaiveBayes`1.TotalB">
            <summary>
            Total number of tokens in set B
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AI.NaiveBayes`1.CalculateProbabilityOfTokens(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calculates the probability of the list of tokens being in set A
            </summary>
            <param name="Items">List of items</param>
            <returns>The probability that the tokens are from set A</returns>
        </member>
        <member name="M:Utilities.DataTypes.AI.NaiveBayes`1.LoadTokens(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Loads a set of tokens
            </summary>
            <param name="SetATokens">Set A</param>
            <param name="SetBTokens">Set B</param>
        </member>
        <member name="M:Utilities.DataTypes.AI.NaiveBayes`1.CalculateProbabilityOfToken(`0)">
            <summary>
            Calculates a single items probability of being in set A
            </summary>
            <param name="Item">Item to calculate</param>
            <returns>The probability that the token is from set A</returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Interfaces.IAspect">
            <summary>
            Aspect interface
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Interfaces.IAspect.AssembliesUsing">
            <summary>
            Set of assemblies that the aspect requires
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Interfaces.IAspect.InterfacesUsing">
            <summary>
            List of interfaces that need to be injected by this aspect
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Interfaces.IAspect.Usings">
            <summary>
            Using statements that the aspect requires
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Interfaces.IAspect.Setup(System.Object)">
            <summary>
            Used to hook into the object once it has been created
            </summary>
            <param name="Object">Object created by the system</param>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Interfaces.IAspect.SetupDefaultConstructor(System.Type)">
            <summary>
            Used to insert code into the default constructor
            </summary>
            <param name="BaseType">Base type</param>
            <returns>The code to insert</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Interfaces.IAspect.SetupEndMethod(System.Reflection.MethodInfo,System.Type,System.String)">
            <summary>
            Used to insert code at the end of the method
            </summary>
            <param name="Method">Overridding Method</param>
            <param name="BaseType">Base type</param>
            <param name="ReturnValueName">Local holder for the value returned by the function</param>
            <returns>The code to insert</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Interfaces.IAspect.SetupExceptionMethod(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Used to insert code within the catch portion of the try/catch portion of the method
            </summary>
            <param name="Method">Overridding Method</param>
            <param name="BaseType">Base type</param>
            <returns>The code to insert</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Interfaces.IAspect.SetupInterfaces(System.Type)">
            <summary>
            Used to set up any interfaces, extra fields, methods, etc. prior to overridding any methods.
            </summary>
            <param name="Type">Type of the object</param>
            <returns>The code to insert</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Interfaces.IAspect.SetupStartMethod(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Used to insert code at the beginning of the method
            </summary>
            <param name="Method">Overridding Method</param>
            <param name="BaseType">Base type</param>
            <returns>The code to insert</returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Interfaces.IAOPModule">
            <summary>
            AOP module interface
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Interfaces.IAOPModule.Setup(Utilities.DataTypes.AOP.Manager)">
            <summary>
            Used to add a class to the AOP system
            </summary>
            <param name="Manager">AOP manager</param>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Interfaces.IClassGenerator">
            <summary>
            Class generator interface
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Interfaces.IClassGenerator.Generate(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Type},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Generates the specified type.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="className">Name of the class.</param>
            <param name="usings">The usings.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="assembliesUsing">The assemblies using.</param>
            <returns>The string representation of the generated class</returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Manager">
            <summary>
            AOP interface manager
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Manager.#ctor(Utilities.DataTypes.CodeGen.Compiler,System.Collections.Generic.IEnumerable{Utilities.DataTypes.AOP.Interfaces.IAspect},System.Collections.Generic.IEnumerable{Utilities.DataTypes.AOP.Interfaces.IAOPModule})">
            <summary>
            Constructor
            </summary>
            <param name="Compiler">The compiler.</param>
            <param name="Aspects">The aspects.</param>
            <param name="Modules">The modules.</param>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Manager.Compiler">
            <summary>
            Gets the system's compiler
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.AOP.Manager.Aspects">
            <summary>
            The list of aspects that are being used
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.AOP.Manager.Classes">
            <summary>
            Dictionary containing generated types and associates it with original type
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Manager.Create``1">
            <summary>
            Creates an object of the specified base type, registering the type if necessary
            </summary>
            <typeparam name="T">The base type</typeparam>
            <returns>Returns an object of the specified base type</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Manager.Create(System.Type)">
            <summary>
            Creates an object of the specified base type, registering the type if necessary
            </summary>
            <param name="BaseType">The base type</param>
            <returns>Returns an object of the specified base type</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Manager.Setup(System.Reflection.Assembly[])">
            <summary>
            Sets up all types from the assembly that it can
            </summary>
            <param name="Assembly">Assembly to set up</param>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Manager.Setup(System.Type[])">
            <summary>
            Sets up a type so it can be used in the system later
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Manager.ToString">
            <summary>
            Outputs manager info as a string
            </summary>
            <returns>String version of the manager</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Manager.FilterTypesToSetup(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Determines whether this instance can setup the specified types.
            </summary>
            <param name="enumerable">The list of types</param>
            <returns>The types that can be set up</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Manager.Setup(System.Type,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Type},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Setups the specified type.
            </summary>
            <param name="Type">The type.</param>
            <param name="Namespace">The namespace.</param>
            <param name="ClassName">Name of the class.</param>
            <param name="Usings">The usings.</param>
            <param name="Interfaces">The interfaces.</param>
            <param name="AssembliesUsing">The assemblies using.</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Module.AOPModule">
            <summary>
            AOP module
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Module.AOPModule.Order">
            <summary>
            Order to run it in
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Module.AOPModule.Load(Utilities.IoC.Interfaces.IBootstrapper)">
            <summary>
            Loads the module
            </summary>
            <param name="Bootstrapper">Bootstrapper to register with</param>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase">
            <summary>
            Generator base class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase"/> class.
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase.GetAssemblies(System.Type)">
            <summary>
            Gets the assemblies associated with the type.
            </summary>
            <param name="type">The type.</param>
            <returns>The assemblies associated with the type</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase.GetAssembliesSimple(System.Type)">
            <summary>
            Gets the assemblies associated with the type.
            </summary>
            <param name="type">The type.</param>
            <returns>The assemblies associated with the type</returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Generators.ClassGenerator">
            <summary>
            Class generator interface
            </summary>
            <seealso cref="T:Utilities.DataTypes.AOP.Interfaces.IClassGenerator"/>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.ClassGenerator.#ctor(System.Type,System.Collections.Concurrent.ConcurrentBag{Utilities.DataTypes.AOP.Interfaces.IAspect})">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.AOP.Generators.ClassGenerator"/> class.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <param name="aspects">The aspects.</param>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.ClassGenerator.Aspects">
            <summary>
            Gets the aspects.
            </summary>
            <value>The aspects.</value>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.ClassGenerator.DeclaringType">
            <summary>
            Gets or sets the type of the declaring.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.ClassGenerator.Generate(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Type},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Generates the specified type.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="className">Name of the class.</param>
            <param name="usings">The usings.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="assembliesUsing">The assemblies using.</param>
            <returns>The string representation of the generated class</returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Generators.ConstructorGenerator">
            <summary>
            Constructor generator
            </summary>
            <seealso cref="T:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase"/>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.ConstructorGenerator.#ctor(System.Reflection.ConstructorInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.AOP.Generators.ConstructorGenerator"/> class.
            </summary>
            <param name="constructor">The constructor.</param>
            <param name="declaringType">Type of the declaring.</param>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.ConstructorGenerator.Constructor">
            <summary>
            Gets or sets the constructor.
            </summary>
            <value>The constructor.</value>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.ConstructorGenerator.DeclaringType">
            <summary>
            Gets or sets the type of the declaring.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.ConstructorGenerator.Generate(System.Collections.Generic.List{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{Utilities.DataTypes.AOP.Interfaces.IAspect})">
            <summary>
            Generates the specified assemblies using.
            </summary>
            <param name="assembliesUsing">The assemblies using.</param>
            <param name="aspects">The aspects.</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Generators.ParameterGenerator">
            <summary>
            Parameter generator
            </summary>
            <seealso cref="T:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase"/>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.ParameterGenerator.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.AOP.Generators.ParameterGenerator"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.ParameterGenerator.Parameter">
            <summary>
            Gets or sets the parameter.
            </summary>
            <value>The parameter.</value>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.ParameterGenerator.Generate(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Generates the specified assemblies using.
            </summary>
            <param name="assembliesUsing">The assemblies using.</param>
            <returns>The string version of the parameter</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.ParameterGenerator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Generators.MethodGenerator">
            <summary>
            Method generator
            </summary>
            <seealso cref="T:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase"/>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.MethodGenerator.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.AOP.Generators.MethodGenerator"/> class.
            </summary>
            <param name="methodInfo">The method information.</param>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.MethodGenerator.DeclaringType">
            <summary>
            Gets or sets the type of the declaring.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.MethodGenerator.MethodInfo">
            <summary>
            Gets or sets the method information.
            </summary>
            <value>The method information.</value>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.MethodGenerator.Generate(System.Collections.Generic.List{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{Utilities.DataTypes.AOP.Interfaces.IAspect})">
            <summary>
            Generates this instance.
            </summary>
            <param name="assembliesUsing">The assemblies using.</param>
            <param name="aspects">The aspects.</param>
            <returns>The generated string of the method</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.MethodGenerator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Utilities.DataTypes.AOP.Generators.PropertyGenerator">
            <summary>
            Property generator
            </summary>
            <seealso cref="T:Utilities.DataTypes.AOP.Generators.BaseClasses.GeneratorBase"/>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.PropertyGenerator.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.AOP.Generators.PropertyGenerator"/> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.PropertyGenerator.DeclaringType">
            <summary>
            Gets or sets the type of the declaring.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:Utilities.DataTypes.AOP.Generators.PropertyGenerator.PropertyInfo">
            <summary>
            Gets or sets the property information.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.PropertyGenerator.Generate(System.Collections.Generic.List{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{Utilities.DataTypes.AOP.Interfaces.IAspect})">
            <summary>
            Generates this instance.
            </summary>
            <param name="assembliesUsing">The assemblies using.</param>
            <param name="aspects">The aspects.</param>
            <returns>The string version of this property</returns>
        </member>
        <member name="M:Utilities.DataTypes.AOP.Generators.PropertyGenerator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Utilities.DataTypes.Bag`1">
            <summary>
            Used to count the number of times something is added to the list
            </summary>
            <typeparam name="T">Type of data within the bag</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Bag`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Bag`1.Count">
            <summary>
            Number of items in the bag
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Bag`1.IsReadOnly">
            <summary>
            Is this read only?
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Bag`1.Items">
            <summary>
            Actual internal container
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Bag`1.Item(`0)">
            <summary>
            Gets a specified item
            </summary>
            <param name="index">Item to get</param>
            <returns>The number of this item in the bag</returns>
        </member>
        <member name="M:Utilities.DataTypes.Bag`1.Add(`0)">
            <summary>
            Adds an item to the bag
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Bag`1.Clear">
            <summary>
            Clears the bag
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Bag`1.Contains(`0)">
            <summary>
            Determines if the bag contains an item
            </summary>
            <param name="item">Item to check</param>
            <returns>True if it does, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Bag`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the bag to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.Bag`1.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Bag`1.Remove(`0)">
            <summary>
            Removes an item from the bag
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Bag`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:Utilities.DataTypes.BinaryTree`1">
            <summary>
            Binary tree
            </summary>
            <typeparam name="T">The type held by the nodes</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.#ctor(Utilities.DataTypes.TreeNode{`0})">
            <summary>
            Constructor
            </summary>
            <param name="root">Root of the binary tree</param>
        </member>
        <member name="P:Utilities.DataTypes.BinaryTree`1.Count">
            <summary>
            Number of items in the tree
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.BinaryTree`1.IsEmpty">
            <summary>
            Is the tree empty
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.BinaryTree`1.IsReadOnly">
            <summary>
            Is this read only?
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.BinaryTree`1.MaxValue">
            <summary>
            Gets the maximum value of the tree
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.BinaryTree`1.MinValue">
            <summary>
            Gets the minimum value of the tree
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.BinaryTree`1.Root">
            <summary>
            The root value
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.BinaryTree`1.NumberOfNodes">
            <summary>
            The number of nodes in the tree
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.op_Implicit(Utilities.DataTypes.BinaryTree{`0})~System.String">
            <summary>
            Converts the object to a string
            </summary>
            <param name="Value">Value to convert</param>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.Add(`0)">
            <summary>
            Adds an item to a binary tree
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.Clear">
            <summary>
            Clears all items from the tree
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.Contains(`0)">
            <summary>
            Determines if the tree contains an item
            </summary>
            <param name="item">Item to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the tree to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.Remove(`0)">
            <summary>
            Removes an item from the tree
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.ToString">
            <summary>
            Outputs the tree as a string
            </summary>
            <returns>The string representation of the tree</returns>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.Find(`0)">
            <summary>
            Finds a specific object
            </summary>
            <param name="item">The item to find</param>
            <returns>The node if it is found</returns>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.Insert(`0)">
            <summary>
            Inserts a value
            </summary>
            <param name="item">item to insert</param>
        </member>
        <member name="M:Utilities.DataTypes.BinaryTree`1.Traversal(Utilities.DataTypes.TreeNode{`0})">
            <summary>
            Traverses the list
            </summary>
            <param name="Node">The node to start the search from</param>
            <returns>The individual items from the tree</returns>
        </member>
        <member name="T:Utilities.DataTypes.TreeNode`1">
            <summary>
            Node class for the Binary tree
            </summary>
            <typeparam name="T">The value type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.TreeNode`1.#ctor(`0,Utilities.DataTypes.TreeNode{`0},Utilities.DataTypes.TreeNode{`0},Utilities.DataTypes.TreeNode{`0})">
            <summary>
            Constructor
            </summary>
            <param name="value">Value of the node</param>
            <param name="parent">Parent node</param>
            <param name="left">Left node</param>
            <param name="right">Right node</param>
        </member>
        <member name="P:Utilities.DataTypes.TreeNode`1.IsLeaf">
            <summary>
            Is this a leaf
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TreeNode`1.IsRoot">
            <summary>
            Is this the root
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TreeNode`1.Left">
            <summary>
            Left node
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TreeNode`1.Parent">
            <summary>
            Parent node
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TreeNode`1.Right">
            <summary>
            Right node
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TreeNode`1.Value">
            <summary>
            Value of the node
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TreeNode`1.Visited">
            <summary>
            Visited?
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.TreeNode`1.ToString">
            <summary>
            Returns the node as a string
            </summary>
            <returns>String representation of the node</returns>
        </member>
        <member name="T:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase">
            <summary>
            Compiler base class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="AssemblyDirectory">Directory to save the generated types (optional)</param>
            <param name="AssemblyName">Assembly name to save the generated types as</param>
            <param name="Optimize">Should this be optimized (defaults to true)</param>
        </member>
        <member name="P:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.AssemblyDirectory">
            <summary>
            Assembly directory
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.AssemblyName">
            <summary>
            Assembly name
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.Classes">
            <summary>
            Dictionary containing generated types and associates it with original type
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.AssemblyStream">
            <summary>
            Gets the assembly stream.
            </summary>
            <value>The assembly stream.</value>
        </member>
        <member name="P:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.Optimize">
            <summary>
            Should this be optimized?
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.RegenerateAssembly">
            <summary>
            Determines if the assembly needs to be regenerated
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.ToString">
            <summary>
            Outputs basic information about the compiler as a string
            </summary>
            <returns>The string version of the compiler</returns>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.Create``1(System.Type,System.Object[])">
            <summary>
            Creates an object using the type specified
            </summary>
            <typeparam name="T">Type to cast to</typeparam>
            <param name="TypeToCreate">Type to create</param>
            <param name="Args">Args to pass to the constructor</param>
            <returns>The created object</returns>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.Add(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Reflection.Assembly[])">
            <summary>
            Compiles and adds the item to the module
            </summary>
            <param name="ClassName">Class name</param>
            <param name="Code">Code to compile</param>
            <param name="Usings">Usings for the code</param>
            <param name="References">References to add for the compiler</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.Add(System.String,System.Collections.Generic.IEnumerable{System.String},System.Reflection.Assembly[])">
            <summary>
            Adds the specified code.
            </summary>
            <param name="Code">The code.</param>
            <param name="Usings">The usings.</param>
            <param name="References">The references.</param>
            <returns>The list of types that have been added</returns>
            <exception cref="T:System.Exception">Any errors that are sent back by Roslyn</exception>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.Add(System.String,System.String,System.Reflection.Assembly[])">
            <summary>
            Compiles and adds the item to the module
            </summary>
            <param name="ClassName">Class name</param>
            <param name="Code">Code to compile</param>
            <param name="References">References to add for the compiler</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.Dispose(System.Boolean)">
            <summary>
            Disposes of the object
            </summary>
            <param name="Managed">Destroy managed</param>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.BaseClasses.CompilerBase.Save">
            <summary>
            Saves the assembly
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.CodeGen.Compiler">
            <summary>
            Compiler
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.Compiler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.Compiler.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="AssemblyName">Assembly name</param>
            <param name="AssemblyDirectory">Assembly directory</param>
            <param name="Optimize">Optimize the assembly?</param>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.Compiler.CreateClass(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Reflection.Assembly[])">
            <summary>
            Creates a class object
            </summary>
            <param name="ClassName">Class name</param>
            <param name="Code">Code</param>
            <param name="References">Assembly references</param>
            <param name="Usings">Namespace usings</param>
            <returns>Type generated</returns>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.Compiler.Create(System.String,System.Collections.Generic.IEnumerable{System.String},System.Reflection.Assembly[])">
            <summary>
            Compiles the specified code and returns the types that are created
            </summary>
            <param name="Code">The code.</param>
            <param name="Usings">The usings.</param>
            <param name="References">The references.</param>
            <returns>The list of types that are generated</returns>
        </member>
        <member name="T:Utilities.DataTypes.CodeGen.Module.CompilerModule">
            <summary>
            Compiler module
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.CodeGen.Module.CompilerModule.Order">
            <summary>
            Order to run it in
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.CodeGen.Module.CompilerModule.Load(Utilities.IoC.Interfaces.IBootstrapper)">
            <summary>
            Loads the module
            </summary>
            <param name="Bootstrapper">Bootstrapper to register with</param>
        </member>
        <member name="T:Utilities.DataTypes.Comparison.GenericComparer`1">
            <summary>
            Generic IComparable class
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Comparison.GenericComparer`1.Compare(`0,`0)">
            <summary>
            Compares the two objects
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns>0 if they're equal, any other value they are not</returns>
        </member>
        <member name="T:Utilities.DataTypes.Comparison.GenericEqualityComparer`1">
            <summary>
            Generic equality comparer
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Comparison.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines if the two items are equal
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Comparison.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Get hash code
            </summary>
            <param name="obj">Object to get the hash code of</param>
            <returns>The object's hash code</returns>
        </member>
        <member name="T:Utilities.DataTypes.Comparison.SimpleComparer`1">
            <summary>
            Simple IComparable class
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Comparison.SimpleComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.Comparison.SimpleComparer`1"/> class.
            </summary>
            <param name="comparisonFunction">The comparison function.</param>
        </member>
        <member name="P:Utilities.DataTypes.Comparison.SimpleComparer`1.ComparisonFunction">
            <summary>
            Gets or sets the comparison function.
            </summary>
            <value>The comparison function.</value>
        </member>
        <member name="M:Utilities.DataTypes.Comparison.SimpleComparer`1.Compare(`0,`0)">
            <summary>
            Compares the two objects
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns>0 if they're equal, any other value they are not</returns>
        </member>
        <member name="T:Utilities.DataTypes.Comparison.SimpleEqualityComparer`1">
            <summary>
            Simple equality comparer
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Comparison.SimpleEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.Comparison.SimpleEqualityComparer`1"/> class.
            </summary>
            <param name="comparisonFunction">The comparison function.</param>
            <param name="hashFunction">The hash function.</param>
        </member>
        <member name="P:Utilities.DataTypes.Comparison.SimpleEqualityComparer`1.ComparisonFunction">
            <summary>
            Gets or sets the comparison function.
            </summary>
            <value>The comparison function.</value>
        </member>
        <member name="P:Utilities.DataTypes.Comparison.SimpleEqualityComparer`1.HashFunction">
            <summary>
            Gets or sets the hash function.
            </summary>
            <value>The hash function.</value>
        </member>
        <member name="M:Utilities.DataTypes.Comparison.SimpleEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines if the two items are equal
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Comparison.SimpleEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Get hash code
            </summary>
            <param name="obj">Object to get the hash code of</param>
            <returns>The object's hash code</returns>
        </member>
        <member name="T:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1">
            <summary>
            Type converter base class
            </summary>
            <typeparam name="T">Converter type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.AssociatedType">
            <summary>
            Associated type
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.ConvertFromTypes">
            <summary>
            Types it can convert from and mapped functions
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.ConvertToTypes">
            <summary>
            Types it can convert to and mapped functions
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.InternalConverter">
            <summary>
            Converter used internally if this can not convert the object
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can convert from
            </summary>
            <param name="context">Context object</param>
            <param name="sourceType">Source type</param>
            <returns>True if it can convert from it, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can convert to
            </summary>
            <param name="context">Context object</param>
            <param name="destinationType">Destination type</param>
            <returns>True if it can convert from it, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from an object to a DbType
            </summary>
            <param name="context">Context object</param>
            <param name="culture">Culture info</param>
            <param name="value">Value</param>
            <returns>The DbType version</returns>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Converters.BaseClasses.TypeConverterBase`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the DbType object to another type
            </summary>
            <param name="context">Context type</param>
            <param name="culture">Culture info</param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.DataTypes.Conversion.Converters.DbTypeTypeConverter">
            <summary>
            DbType converter
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Converters.DbTypeTypeConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Converters.DbTypeTypeConverter.InternalConverter">
            <summary>
            Internal converter
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.Conversion.Converters.Interfaces.IConverter">
            <summary>
            Converter interface
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Converters.Interfaces.IConverter.AssociatedType">
            <summary>
            Type that the converter is associated with
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.Conversion.Converters.SqlDbTypeTypeConverter">
            <summary>
            SqlDbType converter
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Converters.SqlDbTypeTypeConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Converters.SqlDbTypeTypeConverter.Conversions">
            <summary>
            Conversions
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Converters.SqlDbTypeTypeConverter.InternalConverter">
            <summary>
            Internal converter
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.Conversion.Manager">
            <summary>
            Conversion manager
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Manager.#ctor(System.Collections.Generic.IEnumerable{Utilities.DataTypes.Conversion.Converters.Interfaces.IConverter})">
            <summary>
            Constructor
            </summary>
            <param name="Converters">The converters.</param>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Manager.To``2(``0,``1)">
            <summary>
            Converts item from type T to R
            </summary>
            <typeparam name="T">Incoming type</typeparam>
            <typeparam name="R">Resulting type</typeparam>
            <param name="Item">Incoming object</param>
            <param name="DefaultValue">
            Default return value if the item is null or can not be converted
            </param>
            <returns>The value converted to the specified type</returns>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Manager.To``1(``0,System.Type,System.Object)">
            <summary>
            Converts item from type T to R
            </summary>
            <typeparam name="T">Incoming type</typeparam>
            <param name="Item">Incoming object</param>
            <param name="ResultType">Result type</param>
            <param name="DefaultValue">
            Default return value if the item is null or can not be converted
            </param>
            <returns>The value converted to the specified type</returns>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Manager.ToString">
            <summary>
            Outputs information about the manager as a string
            </summary>
            <returns>The string version of the manager</returns>
        </member>
        <member name="T:Utilities.DataTypes.Conversion.Module.ConversionModule">
            <summary>
            Conversion module
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Conversion.Module.ConversionModule.Order">
            <summary>
            Order to run it in
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Conversion.Module.ConversionModule.Load(Utilities.IoC.Interfaces.IBootstrapper)">
            <summary>
            Loads the module
            </summary>
            <param name="Bootstrapper">Bootstrapper to register with</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase">
            <summary>
            Data mapper base class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase.Name">
            <summary>
            The name of the data mapper
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase.Mappings">
            <summary>
            Mappings
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase.Map``2">
            <summary>
            Adds or returns a mapping between two types
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase.Map(System.Type,System.Type)">
            <summary>
            Adds or returns a mapping between two types
            </summary>
            <param name="Left">Left type</param>
            <param name="Right">Right type</param>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase.ToString">
            <summary>
            The name of the data mapper
            </summary>
            <returns>The name of the data mapper</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase.CreateTypeMapping``2">
            <summary>
            Used internally to create type mappings
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.DataMapperBase.CreateTypeMapping(System.Type,System.Type)">
            <summary>
            Used internally to create type mappings
            </summary>
            <param name="Left">Left type</param>
            <param name="Right">Right type</param>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.BaseClasses.MappingBase`2">
            <summary>
            Mapping base class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.MappingBase`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2">
            <summary>
            Type mapping base class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.Mappings">
            <summary>
            List of mappings
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.AddMapping(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftExpression">Left expression</param>
            <param name="RightExpression">Right expression</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.AddMapping(System.Func{`0,System.Object},System.Action{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftGet">Left get function</param>
            <param name="LeftSet">Left set action</param>
            <param name="RightExpression">Right expression</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.AddMapping(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{`1,System.Object},System.Action{`1,System.Object})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftExpression">Left expression</param>
            <param name="RightGet">Right get function</param>
            <param name="RightSet">Right set function</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.AddMapping(System.Func{`0,System.Object},System.Action{`0,System.Object},System.Func{`1,System.Object},System.Action{`1,System.Object})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftGet">Left get function</param>
            <param name="LeftSet">Left set function</param>
            <param name="RightGet">Right get function</param>
            <param name="RightSet">Right set function</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.AutoMap">
            <summary>
            Automatically maps properties that are named the same thing
            </summary>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.Copy(System.Object,System.Object)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.Copy(`0,`1)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.Copy(`1,`0)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.CopyLeftToRight(`0,`1)">
            <summary>
            Copies from the source to the destination (used in instances when both Left and Right
            are the same type and thus Copy is ambiguous)
            </summary>
            <param name="Source">Source</param>
            <param name="Destination">Destination</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.BaseClasses.TypeMappingBase`2.CopyRightToLeft(`1,`0)">
            <summary>
            Copies from the source to the destination (used in instances when both Left and Right
            are the same type and thus Copy is ambiguous)
            </summary>
            <param name="Source">Source</param>
            <param name="Destination">Destination</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Default.DataMapper">
            <summary>
            Default data mapper
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.Default.DataMapper.Name">
            <summary>
            The name of the data mapper
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.DataMapper.CreateTypeMapping``2">
            <summary>
            Used internally to create type mappings
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.DataMapper.CreateTypeMapping(System.Type,System.Type)">
            <summary>
            Used internally to create type mappings
            </summary>
            <param name="Left">Left type</param>
            <param name="Right">Right type</param>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Default.Mapping`2">
            <summary>
            Mapping class
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.Mapping`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Constructor
            </summary>
            <param name="LeftExpression">Left expression</param>
            <param name="RightExpression">Right expression</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.Mapping`2.#ctor(System.Func{`0,System.Object},System.Action{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Constructor
            </summary>
            <param name="LeftGet">Left get function</param>
            <param name="LeftSet">Left set action</param>
            <param name="RightExpression">Right expression</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.Mapping`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{`1,System.Object},System.Action{`1,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="LeftExpression">Left expression</param>
            <param name="RightGet">Right get function</param>
            <param name="RightSet">Right set function</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.Mapping`2.#ctor(System.Func{`0,System.Object},System.Action{`0,System.Object},System.Func{`1,System.Object},System.Action{`1,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="LeftGet">Left get function</param>
            <param name="LeftSet">Left set function</param>
            <param name="RightGet">Right get function</param>
            <param name="RightSet">Right set function</param>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.Default.Mapping`2.LeftGet">
            <summary>
            Left get function
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.Default.Mapping`2.LeftSet">
            <summary>
            Left set function
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.Default.Mapping`2.RightGet">
            <summary>
            Right get function
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.Default.Mapping`2.RightSet">
            <summary>
            Right set function
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.Mapping`2.Copy(`0,`1)">
            <summary>
            Copies the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.Mapping`2.Copy(`1,`0)">
            <summary>
            Copies the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.Mapping`2.CopyLeftToRight(`0,`1)">
            <summary>
            Copies from the source to the destination (used in instances when both Left and Right
            are the same type and thus Copy is ambiguous)
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.Mapping`2.CopyRightToLeft(`1,`0)">
            <summary>
            Copies from the source to the destination (used in instances when both Left and Right
            are the same type and thus Copy is ambiguous)
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Default.TypeMapping`2">
            <summary>
            Type mapping default class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.TypeMapping`2.AddMapping(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftExpression">Left expression</param>
            <param name="RightExpression">Right expression</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.TypeMapping`2.AddMapping(System.Func{`0,System.Object},System.Action{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftGet">Left get function</param>
            <param name="LeftSet">Left set action</param>
            <param name="RightExpression">Right expression</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.TypeMapping`2.AddMapping(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{`1,System.Object},System.Action{`1,System.Object})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftExpression">Left expression</param>
            <param name="RightGet">Right get function</param>
            <param name="RightSet">Right set function</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.TypeMapping`2.AddMapping(System.Func{`0,System.Object},System.Action{`0,System.Object},System.Func{`1,System.Object},System.Action{`1,System.Object})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftGet">Left get function</param>
            <param name="LeftSet">Left set function</param>
            <param name="RightGet">Right get function</param>
            <param name="RightSet">Right set function</param>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.TypeMapping`2.Copy(`0,`1)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.TypeMapping`2.Copy(`1,`0)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.TypeMapping`2.CopyLeftToRight(`0,`1)">
            <summary>
            Copies from the source to the destination (used in instances when both Left and Right
            are the same type and thus Copy is ambiguous)
            </summary>
            <param name="Source">Source</param>
            <param name="Destination">Destination</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Default.TypeMapping`2.CopyRightToLeft(`1,`0)">
            <summary>
            Copies from the source to the destination (used in instances when both Left and Right
            are the same type and thus Copy is ambiguous)
            </summary>
            <param name="Source">Source</param>
            <param name="Destination">Destination</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.IDataMapper">
            <summary>
            Data mapper interface
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.IDataMapper.Map``2">
            <summary>
            Adds or returns a mapping between two types
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.IDataMapper.Map(System.Type,System.Type)">
            <summary>
            Adds or returns a mapping between two types
            </summary>
            <param name="Left">Left type</param>
            <param name="Right">Right type</param>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.IMapperModule">
            <summary>
            Mapping interface
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.IMapperModule.Map(Utilities.DataTypes.DataMapper.Manager)">
            <summary>
            Called when mapping various classes to one another
            </summary>
            <param name="Manager">Mapping manager class</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.IMapping">
            <summary>
            Mapping interface
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.IMapping`2">
            <summary>
            Mapping interface
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping">
            <summary>
            Type mapping interface
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping.AutoMap">
            <summary>
            Automatically maps properties that are named the same thing
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping.Copy(System.Object,System.Object)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2">
            <summary>
            Type mapping interface
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2.AddMapping(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftExpression">Left expression</param>
            <param name="RightExpression">Right expression</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2.AddMapping(System.Func{`0,System.Object},System.Action{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftGet">Left get function</param>
            <param name="LeftSet">Left set action</param>
            <param name="RightExpression">Right expression</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2.AddMapping(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{`1,System.Object},System.Action{`1,System.Object})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftExpression">Left expression</param>
            <param name="RightGet">Right get function</param>
            <param name="RightSet">Right set function</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2.AddMapping(System.Func{`0,System.Object},System.Action{`0,System.Object},System.Func{`1,System.Object},System.Action{`1,System.Object})">
            <summary>
            Adds a mapping
            </summary>
            <param name="LeftGet">Left get function</param>
            <param name="LeftSet">Left set function</param>
            <param name="RightGet">Right get function</param>
            <param name="RightSet">Right set function</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2.Copy(`0,`1)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2.Copy(`1,`0)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2.CopyLeftToRight(`0,`1)">
            <summary>
            Copies from the source to the destination (used in instances when both Left and Right
            are the same type and thus Copy is ambiguous)
            </summary>
            <param name="Source">Source</param>
            <param name="Destination">Destination</param>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.ITypeMapping`2.CopyRightToLeft(`1,`0)">
            <summary>
            Copies from the source to the destination (used in instances when both Left and Right
            are the same type and thus Copy is ambiguous)
            </summary>
            <param name="Source">Source</param>
            <param name="Destination">Destination</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.Contracts.IDataMapperContract">
            <summary>
            IDataMapper contract class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.Contracts.IDataMapperContract.Map``2">
            <summary>
            Adds or returns a mapping between two types
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
            <returns>
            A mapping object for the two types specified
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.Contracts.IDataMapperContract.Map(System.Type,System.Type)">
            <summary>
            Adds or returns a mapping between two types
            </summary>
            <param name="Left">Left type</param>
            <param name="Right">Right type</param>
            <returns>
            A mapping object for the two types specified
            </returns>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.Contracts.IMapperModuleContract">
            <summary>
            IMapperModule contract class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.Contracts.IMapperModuleContract.Map(Utilities.DataTypes.DataMapper.Manager)">
            <summary>
            Called when mapping various classes to one another
            </summary>
            <param name="Manager">Mapping manager class</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.Contracts.ITypeMappingContract">
            <summary>
            ITypeMapping contract class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.Contracts.ITypeMappingContract.AutoMap">
            <summary>
            Automatically maps properties that are named the same thing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Interfaces.Contracts.ITypeMappingContract.Copy(System.Object,System.Object)">
            <summary>
            Copies from the source to the destination
            </summary>
            <param name="Source">Source object</param>
            <param name="Destination">Destination object</param>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Interfaces.Contracts.ITypeMappingContract`2">
            <summary>
            ITypeMapping contract class
            </summary>
            <typeparam name="Left">The type of the left.</typeparam>
            <typeparam name="Right">The type of the right.</typeparam>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Manager">
            <summary>
            Data mapper manager
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Manager.#ctor(System.Collections.Generic.IEnumerable{Utilities.DataTypes.DataMapper.Interfaces.IDataMapper},System.Collections.Generic.IEnumerable{Utilities.DataTypes.DataMapper.Interfaces.IMapperModule})">
            <summary>
            Constructor
            </summary>
            <param name="DataMappers">The data mappers.</param>
            <param name="MapperModules">The mapper modules.</param>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.Manager.DataMapper">
            <summary>
            Data mapper
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Manager.Map``2">
            <summary>
            Adds or returns a mapping between two types
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Manager.Map(System.Type,System.Type)">
            <summary>
            Adds or returns a mapping between two types
            </summary>
            <param name="Left">Left type</param>
            <param name="Right">Right type</param>
            <returns>A mapping object for the two types specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Manager.ToString">
            <summary>
            Outputs the string information about the manager
            </summary>
            <returns>The string info about the manager</returns>
        </member>
        <member name="T:Utilities.DataTypes.DataMapper.Module.DataMapperModule">
            <summary>
            Data mapper module
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DataMapper.Module.DataMapperModule.Order">
            <summary>
            Order to run it in
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DataMapper.Module.DataMapperModule.Load(Utilities.IoC.Interfaces.IBootstrapper)">
            <summary>
            Loads the module
            </summary>
            <param name="Bootstrapper">Bootstrapper to register with</param>
        </member>
        <member name="T:Utilities.DataTypes.DateSpan">
            <summary>
            Represents a date span
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start of the date span</param>
            <param name="end">End of the date span</param>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.Days">
            <summary>
            Days between the two dates
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.End">
            <summary>
            End date
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.Hours">
            <summary>
            Hours between the two dates
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.MilliSeconds">
            <summary>
            Milliseconds between the two dates
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.Minutes">
            <summary>
            Minutes between the two dates
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.Months">
            <summary>
            Months between the two dates
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.Seconds">
            <summary>
            Seconds between the two dates
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.Start">
            <summary>
            Start date
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.DateSpan.Years">
            <summary>
            Years between the two dates
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.op_Inequality(Utilities.DataTypes.DateSpan,Utilities.DataTypes.DateSpan)">
            <summary>
            Determines if two DateSpans are not equal
            </summary>
            <param name="Span1">Span 1</param>
            <param name="Span2">Span 2</param>
            <returns>True if they are not equal, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.op_Addition(Utilities.DataTypes.DateSpan,Utilities.DataTypes.DateSpan)">
            <summary>
            Addition operator
            </summary>
            <param name="Span1">Span 1</param>
            <param name="Span2">Span 2</param>
            <returns>The combined date span</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.op_Equality(Utilities.DataTypes.DateSpan,Utilities.DataTypes.DateSpan)">
            <summary>
            Determines if two DateSpans are equal
            </summary>
            <param name="Span1">Span 1</param>
            <param name="Span2">Span 2</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.op_Implicit(Utilities.DataTypes.DateSpan)~System.String">
            <summary>
            Converts the object to a string
            </summary>
            <param name="Value">Value to convert</param>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.Equals(System.Object)">
            <summary>
            Determines if two objects are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.GetHashCode">
            <summary>
            Gets the hash code for the date span
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.Intersection(Utilities.DataTypes.DateSpan)">
            <summary>
            Returns the intersecting time span between the two values
            </summary>
            <param name="Span">Span to use</param>
            <returns>The intersection of the two time spans</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.Overlap(Utilities.DataTypes.DateSpan)">
            <summary>
            Determines if two DateSpans overlap
            </summary>
            <param name="Span">The span to compare to</param>
            <returns>True if they overlap, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateSpan.ToString">
            <summary>
            Converts the DateSpan to a string
            </summary>
            <returns>The DateSpan as a string</returns>
        </member>
        <member name="T:Utilities.DataTypes.Change">
            <summary>
            Change class
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Change.#ctor(System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="originalValue">Original value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="P:Utilities.DataTypes.Change.NewValue">
            <summary>
            New value
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Change.OriginalValue">
            <summary>
            Original value
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.Dynamo`1">
            <summary>
            Dynamic object implementation (used when inheriting)
            </summary>
            <typeparam name="T">Child object type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo`1.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="item">Item to copy values from</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="dictionary">Dictionary to copy</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo`1.Keys">
            <summary>
            Keys to the dynamic type
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo`1.Values">
            <summary>
            Gets the Values
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo`1.GetValue(System.String,System.Type)">
            <summary>
            Gets a value
            </summary>
            <param name="Name">Name of the item</param>
            <param name="ReturnType">Return value type</param>
            <returns>The returned value</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo`1.SetValue(System.String,System.Object)">
            <summary>
            Sets a value
            </summary>
            <param name="key">Name of the item</param>
            <param name="value">Value associated with the key</param>
        </member>
        <member name="T:Utilities.DataTypes.Dynamo">
            <summary>
            Dynamic object implementation
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="item">Item to copy values from</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="dictionary">Dictionary to copy</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.ChangeLog">
            <summary>
            Change log
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.Count">
            <summary>
            Number of items
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.IsReadOnly">
            <summary>
            Is this read only?
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.Keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.Values">
            <summary>
            Values
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.ChildValues">
            <summary>
            Child class key/value dictionary
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.InternalValues">
            <summary>
            Internal key/value dictionary
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.AOPManager">
            <summary>
            Gets or sets the aop manager.
            </summary>
            <value>The aop manager.</value>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.DataMapper">
            <summary>
            Gets or sets the data mapper.
            </summary>
            <value>The data mapper.</value>
        </member>
        <member name="P:Utilities.DataTypes.Dynamo.Item(System.String)">
            <summary>
            Gets the value associated with the key specified
            </summary>
            <param name="key">Key to get</param>
            <returns>The object associated with the key</returns>
        </member>
        <member name="F:Utilities.DataTypes.Dynamo.getValueEnd_">
            <summary>
            The get value end_
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.Dynamo.getValueStart_">
            <summary>
            The get value start_
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.Dynamo.propertyChanged_">
            <summary>
            The property changed_
            </summary>
        </member>
        <member name="E:Utilities.DataTypes.Dynamo.GetValueEnd">
            <summary>
            Called when the value/property is found but before it is returned to the caller Sends
            (this, PropertyName, EventArgs) to items attached to the event
            </summary>
        </member>
        <member name="E:Utilities.DataTypes.Dynamo.GetValueStart">
            <summary>
            Called when beginning to get a value/property Sends (this, EventArgs) to items attached
            to the event
            </summary>
        </member>
        <member name="E:Utilities.DataTypes.Dynamo.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.Add(System.String,System.Object)">
            <summary>
            Adds a key/value pair to the object
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds a key/value pair
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.Clear">
            <summary>
            Clears the key/value pairs
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Does the object contain the key/value pair
            </summary>
            <param name="item">Item to check</param>
            <returns>True if it is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.ContainsKey(System.String)">
            <summary>
            Determines if the object contains a key
            </summary>
            <param name="key">Key to check</param>
            <returns>True if it is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.Copy(System.Object)">
            <summary>
            Copies the properties from an item
            </summary>
            <param name="Item">Item to copy from</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the key/value pairs to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Array index</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.CopyTo(System.Object)">
            <summary>
            Copies data from here to another object
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.Equals(System.Object)">
            <summary>
            Determines if two objects are equal
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if they're equal, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.GetDynamicMemberNames">
            <summary>
            Gets the dynamic member names
            </summary>
            <returns>The keys used internally</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.GetEnumerator">
            <summary>
            Gets the enumerator for the object
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data and serializes it
            </summary>
            <param name="info">Serialization info object</param>
            <param name="context">Streaming context object</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.GetSchema">
            <summary>
            Not used
            </summary>
            <returns>Null</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the data from an XML doc
            </summary>
            <param name="reader">XML reader</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.Remove(System.String)">
            <summary>
            Removes the value associated with the key
            </summary>
            <param name="key">Key to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes a key/value pair
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.SubSet(System.String[])">
            <summary>
            Returns a subset of the current Dynamo object
            </summary>
            <param name="Keys">Property keys to return</param>
            <returns>A new Dynamo object containing only the keys specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the object
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.To``1">
            <summary>
            Converts the object to the type specified
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>The object converted to the type specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.To(System.Type)">
            <summary>
            Converts the object to the type specified
            </summary>
            <param name="ObjectType">Object type</param>
            <returns>The object converted to the type specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.ToString">
            <summary>
            Outputs the object graph
            </summary>
            <returns>The string version of the object</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Attempts to convert the object
            </summary>
            <param name="binder">Convert binder</param>
            <param name="result">Result</param>
            <returns>True if it is converted, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Attempts to get a member
            </summary>
            <param name="binder">GetMemberBinder object</param>
            <param name="result">Result</param>
            <returns>True if it gets the member, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempts to get a value
            </summary>
            <param name="key">Key to get</param>
            <param name="value">Value object</param>
            <returns>True if it the key is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Attempts to invoke a function
            </summary>
            <param name="binder">Invoke binder</param>
            <param name="args">Function args</param>
            <param name="result">Result</param>
            <returns>True if it invokes, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Attempts to invoke a member
            </summary>
            <param name="binder">Invoke binder</param>
            <param name="args">Function args</param>
            <param name="result">Result</param>
            <returns>True if it invokes, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Attempts to set the member
            </summary>
            <param name="binder">Member binder</param>
            <param name="value">Value</param>
            <returns>True if it is set, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the data to an XML doc
            </summary>
            <param name="writer">XML writer</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.GetValue(System.String,System.Type)">
            <summary>
            Gets a value
            </summary>
            <param name="Name">Name of the item</param>
            <param name="ReturnType">Return value type</param>
            <returns>The returned value</returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.RaiseGetValueEnd(System.String,System.Object)">
            <summary>
            Raises the get value end event
            </summary>
            <param name="PropertyName">Property name</param>
            <param name="Value">Value initially being returned</param>
            <returns>
            Returns null if the function should continue, any other value should be immediately
            returned to the user
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.RaiseGetValueStart(System.String)">
            <summary>
            Raises the get value start event
            </summary>
            <param name="PropertyName">Property name</param>
            <returns>
            Returns null if the function should continue, any other value should be immediately
            returned to the user
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.RaisePropertyChanged(System.String,System.Object)">
            <summary>
            Raises the property changed event
            </summary>
            <param name="PropertyName">Property name</param>
            <param name="NewValue">New value for the property</param>
        </member>
        <member name="M:Utilities.DataTypes.Dynamo.SetValue(System.String,System.Object)">
            <summary>
            Sets a value
            </summary>
            <param name="key">Name of the item</param>
            <param name="value">Value to set</param>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.BaseEventArgs">
            <summary>
            Base event args for the events used in the system
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.EventArgs.BaseEventArgs.Content">
            <summary>
            Content of the event
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.EventArgs.BaseEventArgs.Stop">
            <summary>
            Should the event be stopped?
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.ChangedEventArgs">
            <summary>
            Changed event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.DeletedEventArgs">
            <summary>
            Deleted event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.DeletingEventArgs">
            <summary>
            Deleting event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.LoadedEventArgs">
            <summary>
            Loaded event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.LoadingEventArgs">
            <summary>
            Loading event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.OnEndEventArgs">
            <summary>
            On end event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.OnErrorEventArgs">
            <summary>
            On error event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.OnStartEventArgs">
            <summary>
            On start event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.SavedEventArgs">
            <summary>
            Saved event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.EventArgs.SavingEventArgs">
            <summary>
            Saving event args
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.ArrayExtensions">
            <summary>
            Array extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ArrayExtensions.Clear(System.Array)">
            <summary>
            Clears the array completely
            </summary>
            <param name="Array">Array to clear</param>
            <returns>The final array</returns>
        </member>
        <member name="M:Utilities.DataTypes.ArrayExtensions.Clear``1(``0[])">
            <summary>
            Clears the array completely
            </summary>
            <param name="Array">Array to clear</param>
            <typeparam name="ArrayType">Array type</typeparam>
            <returns>The final array</returns>
        </member>
        <member name="M:Utilities.DataTypes.ArrayExtensions.Concat``1(``0[],``0[][])">
            <summary>
            Combines two arrays and returns a new array containing both values
            </summary>
            <typeparam name="ArrayType">Type of the data in the array</typeparam>
            <param name="Array1">Array 1</param>
            <param name="Additions">Arrays to concat onto the first item</param>
            <returns>A new array containing both arrays' values</returns>
        </member>
        <member name="T:Utilities.DataTypes.CacheExtensions">
            <summary>
            Extension methods relating to caching of data
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.CacheExtensions.Cache(System.Object,System.String,System.String)">
            <summary>
            Cacnes the object based on the key and cache specified
            </summary>
            <param name="Object">Object to cache</param>
            <param name="Key">Cache key</param>
            <param name="Cache">Name of the cache to use</param>
        </member>
        <member name="M:Utilities.DataTypes.CacheExtensions.GetFromCache``1(System.String,``0,System.String)">
            <summary>
            Gets the specified object from the cache
            </summary>
            <typeparam name="T">Type to convert the object to</typeparam>
            <param name="Key">Key to the object</param>
            <param name="DefaultValue">Default value if the key is not found</param>
            <param name="Cache">Cache to get the item from</param>
            <returns>The object specified or the default value if it is not found</returns>
        </member>
        <member name="T:Utilities.DataTypes.DateCompare">
            <summary>
            Date comparison type
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.DateCompare.InFuture">
            <summary>
            In the future
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.DateCompare.InPast">
            <summary>
            In the past
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.DateCompare.Today">
            <summary>
            Today
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.DateCompare.WeekDay">
            <summary>
            Weekday
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.DateCompare.WeekEnd">
            <summary>
            Weekend
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.TimeFrame">
            <summary>
            Time frame
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.TimeFrame.Day">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.TimeFrame.Week">
            <summary>
            Week
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.TimeFrame.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.TimeFrame.Quarter">
            <summary>
            Quarter
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.TimeFrame.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.DateTimeExtensions">
            <summary>
            DateTime extension methods
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            Adds the number of weeks to the date
            </summary>
            <param name="Date">Date input</param>
            <param name="NumberOfWeeks">Number of weeks to add</param>
            <returns>The date after the number of weeks are added</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.Age(System.DateTime,System.DateTime)">
            <summary>
            Calculates age based on date supplied
            </summary>
            <param name="Date">Birth date</param>
            <param name="CalculateFrom">Date to calculate from</param>
            <returns>The total age in years</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.BeginningOf(System.DateTime,Utilities.DataTypes.TimeFrame,System.Globalization.CultureInfo)">
            <summary>
            Beginning of a specific time frame
            </summary>
            <param name="Date">Date to base off of</param>
            <param name="TimeFrame">Time frame to use</param>
            <param name="Culture">
            Culture to use for calculating (defaults to the current culture)
            </param>
            <returns>The beginning of a specific time frame</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.BeginningOf(System.DateTime,Utilities.DataTypes.TimeFrame,System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Beginning of a specific time frame
            </summary>
            <param name="Date">Date to base off of</param>
            <param name="TimeFrame">Time frame to use</param>
            <param name="Culture">
            Culture to use for calculating (defaults to the current culture)
            </param>
            <param name="StartOfQuarter1">Start of the first quarter</param>
            <returns>The beginning of a specific time frame</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.DaysIn(System.DateTime,Utilities.DataTypes.TimeFrame,System.Globalization.CultureInfo)">
            <summary>
            Gets the number of days in the time frame specified based on the date
            </summary>
            <param name="Date">Date</param>
            <param name="TimeFrame">Time frame to calculate the number of days from</param>
            <param name="Culture">
            Culture to use for calculating (defaults to the current culture)
            </param>
            <returns>The number of days in the time frame</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.DaysIn(System.DateTime,Utilities.DataTypes.TimeFrame,System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the number of days in the time frame specified based on the date
            </summary>
            <param name="Date">Date</param>
            <param name="TimeFrame">Time frame to calculate the number of days from</param>
            <param name="Culture">
            Culture to use for calculating (defaults to the current culture)
            </param>
            <param name="StartOfQuarter1">Start of the first quarter</param>
            <returns>The number of days in the time frame</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.DaysLeftIn(System.DateTime,Utilities.DataTypes.TimeFrame,System.Globalization.CultureInfo)">
            <summary>
            Gets the number of days left in the time frame specified based on the date
            </summary>
            <param name="Date">Date</param>
            <param name="TimeFrame">Time frame to calculate the number of days left</param>
            <param name="Culture">
            Culture to use for calculating (defaults to the current culture)
            </param>
            <returns>The number of days left in the time frame</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.DaysLeftIn(System.DateTime,Utilities.DataTypes.TimeFrame,System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the number of days left in the time frame specified based on the date
            </summary>
            <param name="Date">Date</param>
            <param name="TimeFrame">Time frame to calculate the number of days left</param>
            <param name="Culture">
            Culture to use for calculating (defaults to the current culture)
            </param>
            <param name="StartOfQuarter1">Start of the first quarter</param>
            <returns>The number of days left in the time frame</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.EndOf(System.DateTime,Utilities.DataTypes.TimeFrame,System.Globalization.CultureInfo)">
            <summary>
            End of a specific time frame
            </summary>
            <param name="Date">Date to base off of</param>
            <param name="TimeFrame">Time frame to use</param>
            <param name="Culture">
            Culture to use for calculating (defaults to the current culture)
            </param>
            <returns>
            The end of a specific time frame (TimeFrame.Day is the only one that sets the time to
            12: 59:59 PM, all else are the beginning of the day)
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.EndOf(System.DateTime,Utilities.DataTypes.TimeFrame,System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            End of a specific time frame
            </summary>
            <param name="Date">Date to base off of</param>
            <param name="TimeFrame">Time frame to use</param>
            <param name="Culture">
            Culture to use for calculating (defaults to the current culture)
            </param>
            <param name="StartOfQuarter1">Start of the first quarter</param>
            <returns>
            The end of a specific time frame (TimeFrame.Day is the only one that sets the time to
            12: 59:59 PM, all else are the beginning of the day)
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.Is(System.DateTime,Utilities.DataTypes.DateCompare)">
            <summary>
            Determines if the date fulfills the comparison
            </summary>
            <param name="Date">Date to check</param>
            <param name="Comparison">
            Comparison type (can be combined, so you can do weekday in the future, etc)
            </param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.LocalTimeZone(System.DateTime)">
            <summary>
            Gets the local time zone
            </summary>
            <param name="Date">Date object</param>
            <returns>The local time zone</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time portion of a specific date
            </summary>
            <param name="Date">Date input</param>
            <param name="Hour">Hour to set</param>
            <param name="Minutes">Minutes to set</param>
            <param name="Seconds">Seconds to set</param>
            <returns>Sets the time portion of the specified date</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            Sets the time portion of a specific date
            </summary>
            <param name="Date">Date input</param>
            <param name="Time">Time to set</param>
            <returns>Sets the time portion of the specified date</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.To(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts a DateTime to a specific time zone
            </summary>
            <param name="Date">DateTime to convert</param>
            <param name="TimeZone">Time zone to convert to</param>
            <returns>The converted DateTime</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.To(System.DateTime,System.DateTime)">
            <summary>
            Returns the date in int format based on an Epoch (defaults to unix epoch of 1/1/1970)
            </summary>
            <param name="Date">Date to convert</param>
            <param name="Epoch">Epoch to use (defaults to unix epoch of 1/1/1970)</param>
            <returns>The date in Unix format</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.To(System.Int32,System.DateTime)">
            <summary>
            Returns the date in DateTime format based on an Epoch (defaults to unix epoch of 1/1/1970)
            </summary>
            <param name="Date">Date to convert</param>
            <param name="Epoch">Epoch to use (defaults to unix epoch of 1/1/1970)</param>
            <returns>The Unix Date in DateTime format</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.To(System.Int64,System.DateTime)">
            <summary>
            Returns the date in DateTime format based on an Epoch (defaults to unix epoch of 1/1/1970)
            </summary>
            <param name="Date">Date to convert</param>
            <param name="Epoch">Epoch to use (defaults to unix epoch of 1/1/1970)</param>
            <returns>The Unix Date in DateTime format</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.ToString(System.DateTime,System.DateTime)">
            <summary>
            Converts the DateTime object to string describing, relatively how long ago or how far in
            the future the input is based off of another DateTime object specified.
            ex:
            Input=March 21, 2013 Epoch=March 22, 2013 returns "1 day ago" Input=March 22, 2013
            Epoch=March 21, 2013 returns "1 day from now"
            </summary>
            <param name="Input">Input</param>
            <param name="Epoch">DateTime object that the input is comparred to</param>
            <returns>The difference between the input and epoch expressed as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.DateTimeExtensions.UTCOffset(System.DateTime)">
            <summary>
            Gets the UTC offset
            </summary>
            <param name="Date">Date to get the offset of</param>
            <returns>UTC offset</returns>
        </member>
        <member name="T:Utilities.DataTypes.DelegateExtensions">
            <summary>
            Extensions for Func, Action, and EventHandler
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.DelegateExtensions.Async(System.Action)">
            <summary>
            Runs an action async
            </summary>
            <param name="Action">Action to run</param>
        </member>
        <member name="M:Utilities.DataTypes.DelegateExtensions.Raise``1(System.Action{``0},``0)">
            <summary>
            Safely calls the specified action
            </summary>
            <typeparam name="T">The type of the event args</typeparam>
            <param name="Delegate">The delegate</param>
            <param name="EventArgs">The event args</param>
        </member>
        <member name="M:Utilities.DataTypes.DelegateExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Safely raises the event
            </summary>
            <typeparam name="T">The type of the event args</typeparam>
            <param name="Delegate">The delegate</param>
            <param name="Sender">The sender</param>
            <param name="EventArg">The event args</param>
        </member>
        <member name="M:Utilities.DataTypes.DelegateExtensions.Raise``2(System.Func{``0,``1},``0)">
            <summary>
            Safely calls the Func
            </summary>
            <typeparam name="T1">The event arg type</typeparam>
            <typeparam name="T2">The return type</typeparam>
            <param name="Delegate">The delegate</param>
            <param name="EventArgs">The event args</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="T:Utilities.DataTypes.ExceptionExtensions">
            <summary>
            Class for housing exception specific extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ExceptionExtensions.ToString(System.Exception,System.String,System.String)">
            <summary>
            Converts the exception to a string and appends the specified prefix/suffix (used for logging)
            </summary>
            <param name="Exception">Exception to convert</param>
            <param name="Prefix">Prefix</param>
            <param name="Suffix">Suffix</param>
            <returns>The exception as a string</returns>
        </member>
        <member name="T:Utilities.DataTypes.GenericObjectExtensions">
            <summary>
            Generic extensions dealing with objects
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Chain``1(``0,System.Action{``0},``0)">
            <summary>
            Allows actions to be chained together with the caveat that if Object is null, it is
            replaced with the DefaultObjectValue specified. If the Action or Object (once replaced
            with the default object value) is null, it will return the object.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="Object">Object to run the action on</param>
            <param name="Action">Action to run</param>
            <param name="DefaultObjectValue">Default object value</param>
            <returns>The original object</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Chain``2(``0,System.Func{``0,``1},``1,``0)">
            <summary>
            Allows actions to be chained together. It also has a couple of checks in there:
            1) If the function is null, it returns the default return value specified.
            2) If the object is null, it will replace it with the default object value specified.
            3) If the object, once replaced with the default object value specified, is null, it
               will return the default return value specified.
            4) If the return value from the function is null, it returns the default return value specified.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="Object">Object to run the action on</param>
            <param name="Function">Function to run</param>
            <param name="DefaultObjectValue">Default object value</param>
            <param name="DefaultReturnValue">Default return value</param>
            <returns>The result from the function</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Check``1(``0,System.Predicate{``0},``0)">
            <summary>
            Checks to see if the object meets all the criteria. If it does, it returns the object.
            If it does not, it returns the default object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="DefaultValue">The default value to return</param>
            <param name="Predicate">Predicate to check the object against</param>
            <returns>The default object if it fails the criteria, the object otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Check``1(``0,System.Predicate{``0},System.Func{``0})">
            <summary>
            Checks to see if the object meets all the criteria. If it does, it returns the object.
            If it does not, it returns the default object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="DefaultValue">The default value to return</param>
            <param name="Predicate">Predicate to check the object against</param>
            <returns>The default object if it fails the criteria, the object otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Check``1(``0,``0)">
            <summary>
            Checks to see if the object is null. If it is, it returns the default object, otherwise
            the object is returned.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="DefaultValue">The default value to return</param>
            <returns>The default object if it is null, the object otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Check``1(``0,System.Func{``0})">
            <summary>
            Checks to see if the object is null. If it is, it returns the default object, otherwise
            the object is returned.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="DefaultValue">The default value to return</param>
            <returns>The default object if it is null, the object otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Execute``1(System.Func{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes a function, repeating it a number of times in case it fails
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="Function">Function to run</param>
            <param name="Attempts">Number of times to attempt it</param>
            <param name="RetryDelay">The amount of milliseconds to wait between tries</param>
            <param name="TimeOut">
            Max amount of time to wait for the function to run (waits for the current attempt to
            finish before checking)
            </param>
            <returns>The returned value from the function</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Execute(System.Action,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes an action, repeating it a number of times in case it fails
            </summary>
            <param name="Action">Action to run</param>
            <param name="Attempts">Number of times to attempt it</param>
            <param name="RetryDelay">The amount of milliseconds to wait between tries</param>
            <param name="TimeOut">
            Max amount of time to wait for the function to run (waits for the current attempt to
            finish before checking)
            </param>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Is``1(``0,System.Predicate{``0})">
            <summary>
            Determines if the object passes the predicate passed in
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to test</param>
            <param name="Predicate">Predicate to test</param>
            <returns>True if the object passes the predicate, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Is``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to a specific value
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to test</param>
            <param name="ComparisonObject">Comparison object</param>
            <param name="Comparer">Comparer</param>
            <returns>True if the object passes the predicate, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIf``1(``0,System.Predicate{``0},System.Func{System.Exception})">
            <summary>
            Throws the specified exception if the predicate is true for the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is true</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIf``1(``0,System.Predicate{``0},System.Exception)">
            <summary>
            Throws the specified exception if the predicate is true for the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is true</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfDefault``1(``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws an ArgumentNullException
            if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">
            Equality comparer used to determine if the object is equal to default
            </param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfDefault``1(``0,System.Exception,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws the exception that is
            passed in if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">
            Equality comparer used to determine if the object is equal to default
            </param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNot``1(``0,System.Predicate{``0},System.Exception)">
            <summary>
            Throws the specified exception if the predicate is false for the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is false</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNotDefault``1(``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is not equal to default value and throws an ArgumentException
            if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">
            Equality comparer used to determine if the object is equal to default
            </param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNotDefault``1(``0,System.Exception,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is not equal to default value and throws the exception that is
            passed in if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">
            Equality comparer used to determine if the object is equal to default
            </param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNotNull``1(``0,System.String)">
            <summary>
            Determines if the object is not null and throws an ArgumentException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNotNull``1(``0,System.Exception)">
            <summary>
            Determines if the object is not null and throws the exception passed in if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Determines if the IEnumerable is not null or empty and throws an ArgumentException if it is
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Exception)">
            <summary>
            Determines if the IEnumerable is not null or empty and throws the exception passed in if
            it is
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The object to check</param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNull``1(``0,System.String)">
            <summary>
            Determines if the object is null and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNull``1(``0,System.Exception)">
            <summary>
            Determines if the object is null and throws the exception passed in if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Determines if the IEnumerable is null or empty and throws an ArgumentNullException if it is
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Exception)">
            <summary>
            Determines if the IEnumerable is null or empty and throws the exception passed in if it is
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The object to check</param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Times``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Runs a function based on the number of times specified and returns the results
            </summary>
            <typeparam name="T">Type that gets returned</typeparam>
            <param name="Count">Number of times the function should run</param>
            <param name="Function">The function that should run</param>
            <returns>The results from the function</returns>
        </member>
        <member name="M:Utilities.DataTypes.GenericObjectExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Runs an action based on the number of times specified
            </summary>
            <param name="Count">Number of times to run the action</param>
            <param name="Action">Action to run</param>
        </member>
        <member name="T:Utilities.DataTypes.ICollectionExtensions">
            <summary>
            ICollection extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a list of items to the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to add</param>
            <returns>The collection with the added items</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds a list of items to the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to add</param>
            <returns>The collection with the added items</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.AddAndReturn``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to a list and returns the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Item">Item to add to the collection</param>
            <returns>The original item</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0},``0[])">
            <summary>
            Adds items to the collection if it passes the predicate test
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">Predicate that an item needs to satisfy in order to be added</param>
            <returns>True if any are added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">Predicate that an item needs to satisfy in order to be added</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},System.Func{``0,``0,System.Boolean},``0[])">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">
            Predicate used to determine if two values are equal. Return true if they are the same,
            false otherwise
            </param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},System.Func{``0,``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">
            Predicate used to determine if two values are equal. Return true if they are the same,
            false otherwise
            </param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.For``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Action{System.Int32,``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.For``2(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{System.Int32,``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable between the start and end indexes and
            returns an IEnumerable of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items that fit the predicate passed in
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection to remove items from</param>
            <param name="Predicate">Predicate used to determine what items to remove</param>
        </member>
        <member name="M:Utilities.DataTypes.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all items in the list from the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to remove</param>
            <returns>The collection with the items removed</returns>
        </member>
        <member name="T:Utilities.DataTypes.IComparableExtensions">
            <summary>
            IComparable extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.IComparableExtensions.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Checks if an item is between two values
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="Value">Value to check</param>
            <param name="Min">Minimum value</param>
            <param name="Max">Maximum value</param>
            <param name="Comparer">
            Comparer used to compare the values (defaults to GenericComparer)"
            </param>
            <returns>True if it is between the values, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.IComparableExtensions.Clamp``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Clamps a value between two values
            </summary>
            <param name="Value">Value sent in</param>
            <param name="Max">Max value it can be (inclusive)</param>
            <param name="Min">Min value it can be (inclusive)</param>
            <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
            <returns>The value set between Min and Max</returns>
        </member>
        <member name="M:Utilities.DataTypes.IComparableExtensions.Max``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the maximum value between the two
            </summary>
            <param name="InputA">Input A</param>
            <param name="InputB">Input B</param>
            <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
            <returns>The maximum value</returns>
        </member>
        <member name="M:Utilities.DataTypes.IComparableExtensions.Min``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the minimum value between the two
            </summary>
            <param name="InputA">Input A</param>
            <param name="InputB">Input B</param>
            <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
            <returns>The minimum value</returns>
        </member>
        <member name="T:Utilities.DataTypes.IDictionaryExtensions">
            <summary>
            IDictionary extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.IDictionaryExtensions.CopyTo``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Copies the dictionary to another dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="Dictionary">The dictionary.</param>
            <param name="Target">The target dictionary.</param>
            <returns>
            This
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
        </member>
        <member name="M:Utilities.DataTypes.IDictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value from a dictionary or the default value if it isn't found
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="Dictionary">Dictionary to get the value from</param>
            <param name="Key">Key to look for</param>
            <param name="Default">Default value if the key is not found</param>
            <returns>
            The value associated with the key or the default value if the key is not found
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
        </member>
        <member name="M:Utilities.DataTypes.IDictionaryExtensions.SetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Sets the value in a dictionary
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="Dictionary">Dictionary to set the value in</param>
            <param name="Key">Key to look for</param>
            <param name="Value">Value to add</param>
            <returns>The dictionary</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
        </member>
        <member name="M:Utilities.DataTypes.IDictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a dictionary
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
            <param name="Dictionary">Dictionary to sort</param>
            <param name="Comparer">Comparer used to sort (defaults to GenericComparer)</param>
            <returns>The sorted dictionary</returns>
        </member>
        <member name="M:Utilities.DataTypes.IDictionaryExtensions.Sort``3(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Sorts a dictionary
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
            <typeparam name="T3">Order by type</typeparam>
            <param name="Dictionary">Dictionary to sort</param>
            <param name="OrderBy">Function used to order the dictionary</param>
            <param name="Comparer">Comparer used to sort (defaults to GenericComparer)</param>
            <returns>The sorted dictionary</returns>
        </member>
        <member name="T:Utilities.DataTypes.IEnumerableExtensions">
            <summary>
            IEnumerable extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines multiple IEnumerables together and returns a new IEnumerable containing all of
            the values
            </summary>
            <typeparam name="T">Type of the data in the IEnumerable</typeparam>
            <param name="Enumerable1">IEnumerable 1</param>
            <param name="Additions">IEnumerables to concat onto the first item</param>
            <returns>A new IEnumerable containing all values</returns>
            <example>
            <code>
            int[] TestObject1 = new int[] { 1, 2, 3 }; int[] TestObject2 = new int[] { 4, 5, 6
            }; int[] TestObject3 = new int[] { 7, 8, 9 }; TestObject1 =
            TestObject1.Concat(TestObject2, TestObject3).ToArray();
            </code>
            </example>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Returns only distinct items from the IEnumerable based on the predicate
            </summary>
            <typeparam name="T">Object type within the list</typeparam>
            <param name="Enumerable">List of objects</param>
            <param name="Predicate">
            Predicate that is used to determine if two objects are equal. True if they are the same,
            false otherwise
            </param>
            <returns>An IEnumerable of only the distinct items</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ElementsBetween``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns elements starting at the index and ending at the end index
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">List to search</param>
            <param name="Start">Start index (inclusive)</param>
            <param name="End">End index (exclusive)</param>
            <returns>The items between the start and end index</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes values from a list that meet the criteria set forth by the predicate
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="Value">List to cull items from</param>
            <param name="Predicate">Predicate that determines what items to remove</param>
            <returns>An IEnumerable with the objects that meet the criteria removed</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.For``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable between the start and end indexes and
            returns an IEnumerable of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0,System.Exception})">
            <summary>
            Does an action for each item in the IEnumerable
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <param name="CatchAction">Action that occurs if an exception occurs</param>
            <returns>The original list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``0,System.Exception})">
            <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <param name="CatchAction">Action that occurs if an exception occurs</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForEachParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does an action for each item in the IEnumerable in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Results type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <returns>The results in an IEnumerable list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0,System.Exception})">
            <summary>
            Does an action for each item in the IEnumerable
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <param name="CatchAction">Action that occurs if an exception occurs</param>
            <returns>The original list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForEachParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``0,System.Exception})">
            <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <param name="CatchAction">Action that occurs if an exception occurs</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ForParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Results type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.Last``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the last X number of items from the list
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Count">Numbers of items to return</param>
            <returns>The last X items from the list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Does a left join on the two lists
            </summary>
            <typeparam name="T1">The type of outer list.</typeparam>
            <typeparam name="T2">The type of inner list.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <typeparam name="R">The return type</typeparam>
            <param name="outer">The outer list.</param>
            <param name="inner">The inner list.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="resultSelector">The result selector.</param>
            <param name="comparer">The comparer (if null, a generic comparer is used).</param>
            <returns>Returns a left join of the two lists</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.OuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Does an outer join on the two lists
            </summary>
            <typeparam name="T1">The type of outer list.</typeparam>
            <typeparam name="T2">The type of inner list.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <typeparam name="R">The return type</typeparam>
            <param name="outer">The outer list.</param>
            <param name="inner">The inner list.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="resultSelector">The result selector.</param>
            <param name="comparer">The comparer (if null, a generic comparer is used).</param>
            <returns>Returns an outer join of the two lists</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.PositionOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines the position of an object if it is present, otherwise it returns -1
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">List of objects to search</param>
            <param name="Object">Object to find the position of</param>
            <param name="EqualityComparer">
            Equality comparer used to determine if the object is present
            </param>
            <returns>The position of the object if it is present, otherwise -1</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.RightJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Does a right join on the two lists
            </summary>
            <typeparam name="T1">The type of outer list.</typeparam>
            <typeparam name="T2">The type of inner list.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <typeparam name="R">The return type</typeparam>
            <param name="outer">The outer list.</param>
            <param name="inner">The inner list.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="resultSelector">The result selector.</param>
            <param name="comparer">The comparer (if null, a generic comparer is used).</param>
            <returns>Returns a right join of the two lists</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ThrowIfAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Func{System.Exception})">
            <summary>
            Throws the specified exception if the predicate is true for all items
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is true</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ThrowIfAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Exception)">
            <summary>
            Throws the specified exception if the predicate is true for all items
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is true</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ThrowIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Func{System.Exception})">
            <summary>
            Throws the specified exception if the predicate is true for any items
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is true</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ThrowIfAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Exception)">
            <summary>
            Throws the specified exception if the predicate is true for any items
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is true</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.To``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <summary>
            Converts the IEnumerable to a DataTable
            </summary>
            <typeparam name="T">Type of the objects in the IEnumerable</typeparam>
            <param name="List">List to convert</param>
            <param name="Columns">Column names (if empty, uses property names)</param>
            <returns>The list as a DataTable</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.To(System.Collections.IEnumerable,System.String[])">
            <summary>
            Converts the IEnumerable to a DataTable
            </summary>
            <param name="List">List to convert</param>
            <param name="Columns">Column names (if empty, uses property names)</param>
            <returns>The list as a DataTable</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts a list to an array
            </summary>
            <typeparam name="Source">Source type</typeparam>
            <typeparam name="Target">Target type</typeparam>
            <param name="List">List to convert</param>
            <param name="ConvertingFunction">Function used to convert each item</param>
            <returns>The array containing the items from the list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts an IEnumerable to a list
            </summary>
            <typeparam name="Source">Source type</typeparam>
            <typeparam name="Target">Target type</typeparam>
            <param name="List">IEnumerable to convert</param>
            <param name="ConvertingFunction">Function used to convert each item</param>
            <returns>The list containing the items from the IEnumerable</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ToObservableList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts the IEnumerable to an observable list
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="List">The list to convert</param>
            <param name="ConvertingFunction">The converting function.</param>
            <returns>The observable list version of the original list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Converts the list to a string where each item is seperated by the Seperator
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">List to convert</param>
            <param name="ItemOutput">
            Used to convert the item to a string (defaults to calling ToString)
            </param>
            <param name="Seperator">Seperator to use between items (defaults to ,)</param>
            <returns>The string version of the list</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.Transverse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Transverses a hierarchy given the child elements getter.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="collection">The collection hierarchy.</param>
            <param name="property">The child elements getter.</param>
            <returns>The transversed hierarchy.</returns>
        </member>
        <member name="M:Utilities.DataTypes.IEnumerableExtensions.Transverse``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Transverses a hierarchy given the child elements getter.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="item">The root node of the hierarchy.</param>
            <param name="property">The child elements getter.</param>
            <returns>The transversed hierarchy.</returns>
        </member>
        <member name="T:Utilities.DataTypes.MatchCollectionExtensions">
            <summary>
            MatchCollection extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.MatchCollectionExtensions.Where(System.Text.RegularExpressions.MatchCollection,System.Predicate{System.Text.RegularExpressions.Match})">
            <summary>
            Gets a list of items that satisfy the predicate from the collection
            </summary>
            <param name="Collection">Collection to search through</param>
            <param name="Predicate">Predicate that the items must satisfy</param>
            <returns>The matches that satisfy the predicate</returns>
        </member>
        <member name="T:Utilities.DataTypes.ProcessExtensions">
            <summary>
            Process extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ProcessExtensions.GetInformation(System.Diagnostics.Process,System.Boolean)">
            <summary>
            Gets information about all processes and returns it in an HTML formatted string
            </summary>
            <param name="Process">Process to get information about</param>
            <param name="HTMLFormat">Should this be HTML formatted?</param>
            <returns>An HTML formatted string</returns>
        </member>
        <member name="M:Utilities.DataTypes.ProcessExtensions.GetInformation(System.Collections.Generic.IEnumerable{System.Diagnostics.Process},System.Boolean)">
            <summary>
            Gets information about all processes and returns it in an HTML formatted string
            </summary>
            <param name="Processes">Processes to get information about</param>
            <param name="HTMLFormat">Should this be HTML formatted?</param>
            <returns>An HTML formatted string</returns>
        </member>
        <member name="M:Utilities.DataTypes.ProcessExtensions.KillProcessAsync(System.Diagnostics.Process,System.Int32)">
            <summary>
            Kills a process
            </summary>
            <param name="Process">Process that should be killed</param>
            <param name="TimeToKill">Amount of time (in ms) until the process is killed.</param>
        </member>
        <member name="M:Utilities.DataTypes.ProcessExtensions.KillProcessAsync(System.Collections.Generic.IEnumerable{System.Diagnostics.Process},System.Int32)">
            <summary>
            Kills a list of processes
            </summary>
            <param name="Processes">Processes that should be killed</param>
            <param name="TimeToKill">Amount of time (in ms) until the processes are killed.</param>
        </member>
        <member name="M:Utilities.DataTypes.ProcessExtensions.KillProcessAsyncHelper(System.Diagnostics.Process,System.Int32)">
            <summary>
            Kills a process asyncronously
            </summary>
            <param name="Process">Process to kill</param>
            <param name="TimeToKill">Amount of time until the process is killed</param>
        </member>
        <member name="T:Utilities.DataTypes.ReflectionExtensions">
            <summary>
            Reflection oriented extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Attribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Gets the attribute from the item
            </summary>
            <typeparam name="T">Attribute type</typeparam>
            <param name="Provider">Attribute provider</param>
            <param name="Inherit">
            When true, it looks up the heirarchy chain for the inherited custom attributes
            </param>
            <returns>Attribute specified if it exists</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Attributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Gets the attributes from the item
            </summary>
            <typeparam name="T">Attribute type</typeparam>
            <param name="Provider">Attribute provider</param>
            <param name="Inherit">
            When true, it looks up the heirarchy chain for the inherited custom attributes
            </param>
            <returns>Array of attributes</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Call``1(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object
            </summary>
            <param name="MethodName">Method name</param>
            <param name="Object">Object to call the method on</param>
            <param name="InputVariables">(Optional)input variables for the method</param>
            <typeparam name="ReturnType">Return type expected</typeparam>
            <returns>The returned value of the method</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Call``2(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object
            </summary>
            <param name="MethodName">Method name</param>
            <param name="Object">Object to call the method on</param>
            <param name="InputVariables">(Optional)input variables for the method</param>
            <typeparam name="ReturnType">Return type expected</typeparam>
            <typeparam name="GenericType1">Generic method type 1</typeparam>
            <returns>The returned value of the method</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Call``3(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object
            </summary>
            <param name="MethodName">Method name</param>
            <param name="Object">Object to call the method on</param>
            <param name="InputVariables">(Optional)input variables for the method</param>
            <typeparam name="ReturnType">Return type expected</typeparam>
            <typeparam name="GenericType1">Generic method type 1</typeparam>
            <typeparam name="GenericType2">Generic method type 2</typeparam>
            <returns>The returned value of the method</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Call``4(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object
            </summary>
            <param name="MethodName">Method name</param>
            <param name="Object">Object to call the method on</param>
            <param name="InputVariables">(Optional)input variables for the method</param>
            <typeparam name="ReturnType">Return type expected</typeparam>
            <typeparam name="GenericType1">Generic method type 1</typeparam>
            <typeparam name="GenericType2">Generic method type 2</typeparam>
            <typeparam name="GenericType3">Generic method type 3</typeparam>
            <returns>The returned value of the method</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Call``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Calls a method on an object
            </summary>
            <param name="Method">Method</param>
            <param name="Object">Object to call the method on</param>
            <param name="InputVariables">(Optional)input variables for the method</param>
            <typeparam name="ReturnType">Return type expected</typeparam>
            <returns>The returned value of the method</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Create``1(System.Type,System.Object[])">
            <summary>
            Creates an instance of the type and casts it to the specified type
            </summary>
            <typeparam name="ClassType">Class type to return</typeparam>
            <param name="Type">Type to create an instance of</param>
            <param name="args">Arguments sent into the constructor</param>
            <returns>The newly created instance of the type</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Create(System.Type,System.Object[])">
            <summary>
            Creates an instance of the type
            </summary>
            <param name="Type">Type to create an instance of</param>
            <param name="args">Arguments sent into the constructor</param>
            <returns>The newly created instance of the type</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Create``1(System.Collections.Generic.IEnumerable{System.Type},System.Object[])">
            <summary>
            Creates an instance of the types and casts it to the specified type
            </summary>
            <typeparam name="ClassType">Class type to return</typeparam>
            <param name="Types">Types to create an instance of</param>
            <param name="args">Arguments sent into the constructor</param>
            <returns>The newly created instance of the types</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Create(System.Collections.Generic.IEnumerable{System.Type},System.Object[])">
            <summary>
            Creates an instance of the types specified
            </summary>
            <param name="Types">Types to create an instance of</param>
            <param name="args">Arguments sent into the constructor</param>
            <returns>The newly created instance of the types</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.GetName(System.Type)">
            <summary>
            Returns the type's name (Actual C# name, not the funky version from the Name property)
            </summary>
            <param name="ObjectType">Type to get the name of</param>
            <returns>string name of the type</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.HasDefaultConstructor(System.Type)">
            <summary>
            Determines if the type has a default constructor
            </summary>
            <param name="Type">Type to check</param>
            <returns>True if it does, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Is(System.Object,System.Type)">
            <summary>
            Determines if an object is of a specific type
            </summary>
            <param name="Object">Object</param>
            <param name="Type">Type</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Is(System.Type,System.Type)">
            <summary>
            Determines if an object is of a specific type
            </summary>
            <param name="ObjectType">Object type</param>
            <param name="Type">Type</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Is``1(System.Object)">
            <summary>
            Determines if an object is of a specific type
            </summary>
            <param name="Object">Object</param>
            <typeparam name="BaseObjectType">Base object type</typeparam>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Is``1(System.Type)">
            <summary>
            Determines if an object is of a specific type
            </summary>
            <param name="ObjectType">Object type</param>
            <typeparam name="BaseObjectType">Base object type</typeparam>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Load(System.Reflection.AssemblyName)">
            <summary>
            Loads an assembly by its name
            </summary>
            <param name="Name">Name of the assembly to return</param>
            <returns>The assembly specified if it exists</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.LoadAssemblies(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Loads assemblies within a directory and returns them in an array.
            </summary>
            <param name="Directory">The directory to search in</param>
            <param name="Recursive">Determines whether to search recursively or not</param>
            <returns>Array of assemblies in the directory</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.MakeShallowCopy``1(``0,System.Boolean)">
            <summary>
            Makes a shallow copy of the object
            </summary>
            <param name="Object">Object to copy</param>
            <param name="SimpleTypesOnly">
            If true, it only copies simple types (no classes, only items like int, string, etc.),
            false copies everything.
            </param>
            <returns>A copy of the object</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.MarkedWith``1(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Goes through a list of types and determines if they're marked with a specific attribute
            </summary>
            <typeparam name="T">Attribute type</typeparam>
            <param name="Types">Types to check</param>
            <param name="Inherit">
            When true, it looks up the heirarchy chain for the inherited custom attributes
            </param>
            <returns>The list of types that are marked with an attribute</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Objects``1(System.Reflection.Assembly,System.Object[])">
            <summary>
            Returns an instance of all classes that it finds within an assembly that are of the
            specified base type/interface.
            </summary>
            <typeparam name="ClassType">Base type/interface searching for</typeparam>
            <param name="Assembly">Assembly to search within</param>
            <param name="Args">Args used to create the object</param>
            <returns>A list of objects that are of the type specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Objects``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Object[])">
            <summary>
            Returns an instance of all classes that it finds within a group of assemblies that are
            of the specified base type/interface.
            </summary>
            <typeparam name="ClassType">Base type/interface searching for</typeparam>
            <param name="Assemblies">Assemblies to search within</param>
            <param name="Args">Args used to create the object</param>
            <returns>A list of objects that are of the type specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Objects``1(System.IO.DirectoryInfo,System.Boolean,System.Object[])">
            <summary>
            Returns an instance of all classes that it finds within a directory that are of the
            specified base type/interface.
            </summary>
            <typeparam name="ClassType">Base type/interface searching for</typeparam>
            <param name="Directory">Directory to search within</param>
            <param name="Recursive">Should this be recursive</param>
            <param name="Args">Args used to create the object</param>
            <returns>A list of objects that are of the type specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Property(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of property
            </summary>
            <param name="Object">The object to get the property of</param>
            <param name="Property">The property to get</param>
            <returns>Returns the property's value</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Property(System.Object,System.String)">
            <summary>
            Gets the value of property
            </summary>
            <param name="Object">The object to get the property of</param>
            <param name="Property">The property to get</param>
            <returns>Returns the property's value</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Property(System.Object,System.Reflection.PropertyInfo,System.Object,System.String)">
            <summary>
            Sets the value of destination property
            </summary>
            <param name="Object">The object to set the property of</param>
            <param name="Property">The property to set</param>
            <param name="Value">Value to set the property to</param>
            <param name="Format">Allows for formatting if the destination is a string</param>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Property(System.Object,System.String,System.Object,System.String)">
            <summary>
            Sets the value of destination property
            </summary>
            <param name="Object">The object to set the property of</param>
            <param name="Property">The property to set</param>
            <param name="Value">Value to set the property to</param>
            <param name="Format">Allows for formatting if the destination is a string</param>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.PropertyGetter``2(System.Reflection.PropertyInfo)">
            <summary>
            Gets a lambda expression that calls a specific property's getter function
            </summary>
            <typeparam name="ClassType">Class type</typeparam>
            <typeparam name="DataType">Data type expecting</typeparam>
            <param name="Property">Property</param>
            <returns>A lambda expression that calls a specific property's getter function</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.PropertyGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets a lambda expression that calls a specific property's getter function
            </summary>
            <typeparam name="ClassType">Class type</typeparam>
            <param name="Property">Property</param>
            <returns>A lambda expression that calls a specific property's getter function</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.PropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets a property name
            </summary>
            <param name="Expression">LINQ expression</param>
            <returns>The name of the property</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.PropertyName(System.Linq.Expressions.Expression)">
            <summary>
            Gets a property name
            </summary>
            <param name="Expression">LINQ expression</param>
            <returns>The name of the property</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.PropertySetter``2(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets a lambda expression that calls a specific property's setter function
            </summary>
            <typeparam name="ClassType">Class type</typeparam>
            <typeparam name="DataType">Data type expecting</typeparam>
            <param name="Property">Property</param>
            <returns>A lambda expression that calls a specific property's setter function</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.PropertySetter``1(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets a lambda expression that calls a specific property's setter function
            </summary>
            <typeparam name="ClassType">Class type</typeparam>
            <param name="Property">Property</param>
            <returns>A lambda expression that calls a specific property's setter function</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.PropertyType(System.Object,System.String)">
            <summary>
            Gets a property's type
            </summary>
            <param name="Object">object who contains the property</param>
            <param name="PropertyPath">
            Path of the property (ex: Prop1.Prop2.Prop3 would be the Prop1 of the source object,
            which then has a Prop2 on it, which in turn has a Prop3 on it.)
            </param>
            <returns>The type of the property specified or null if it can not be reached.</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.PropertyType(System.Type,System.String)">
            <summary>
            Gets a property's type
            </summary>
            <param name="ObjectType">Object type</param>
            <param name="PropertyPath">
            Path of the property (ex: Prop1.Prop2.Prop3 would be the Prop1 of the source object,
            which then has a Prop2 on it, which in turn has a Prop3 on it.)
            </param>
            <returns>The type of the property specified or null if it can not be reached.</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.ToString(System.Reflection.Assembly,Utilities.DataTypes.VersionInfo)">
            <summary>
            Gets the version information in a string format
            </summary>
            <param name="Assembly">Assembly to get version information from</param>
            <param name="InfoType">Version info type</param>
            <returns>The version information as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.ToString(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Utilities.DataTypes.VersionInfo)">
            <summary>
            Gets the version information in a string format
            </summary>
            <param name="Assemblies">Assemblies to get version information from</param>
            <param name="InfoType">Version info type</param>
            <returns>The version information as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.ToString(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Gets assembly information for all currently loaded assemblies
            </summary>
            <param name="Assemblies">Assemblies to dump information from</param>
            <param name="HTMLOutput">Should HTML output be used</param>
            <returns>An HTML formatted string containing the assembly information</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.ToString(System.Object,System.Boolean)">
            <summary>
            Dumps the property names and current values from an object
            </summary>
            <param name="Object">Object to dunp</param>
            <param name="HTMLOutput">Determines if the output should be HTML or not</param>
            <returns>An HTML formatted table containing the information about the object</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.ToString(System.Type,System.Boolean)">
            <summary>
            Dumps the properties names and current values from an object type (used for static classes)
            </summary>
            <param name="ObjectType">Object type to dunp</param>
            <param name="HTMLOutput">Should this be output as an HTML string</param>
            <returns>An HTML formatted table containing the information about the object type</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Types``1(System.Reflection.Assembly)">
            <summary>
            Gets a list of types based on an interface
            </summary>
            <param name="Assembly">Assembly to check</param>
            <typeparam name="BaseType">Class type to search for</typeparam>
            <returns>List of types that use the interface</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Types(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets a list of types based on an interface
            </summary>
            <param name="Assembly">Assembly to check</param>
            <param name="BaseType">Base type to look for</param>
            <returns>List of types that use the interface</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Types``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets a list of types based on an interface
            </summary>
            <param name="Assemblies">Assemblies to check</param>
            <typeparam name="BaseType">Class type to search for</typeparam>
            <returns>List of types that use the interface</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Types(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Type)">
            <summary>
            Gets a list of types based on an interface
            </summary>
            <param name="Assemblies">Assemblies to check</param>
            <param name="BaseType">Base type to look for</param>
            <returns>List of types that use the interface</returns>
        </member>
        <member name="M:Utilities.DataTypes.ReflectionExtensions.Types(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets a list of types in the assemblies specified
            </summary>
            <param name="Assemblies">Assemblies to check</param>
            <returns>List of types</returns>
        </member>
        <member name="T:Utilities.DataTypes.VersionInfo">
            <summary>
            Version info
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.VersionInfo.ShortVersion">
            <summary>
            Short version
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.VersionInfo.LongVersion">
            <summary>
            Long version
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.StackTraceExtensions">
            <summary>
            Extension methods related to the stack trace
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.StackTraceExtensions.GetMethods(System.Diagnostics.StackTrace,System.Reflection.Assembly[])">
            <summary>
            Gets the methods involved in the stack trace
            </summary>
            <param name="Stack">Stack trace to get methods from</param>
            <param name="ExcludedAssemblies">Excludes methods from the specified assemblies</param>
            <returns>A list of methods involved in the stack trace</returns>
        </member>
        <member name="M:Utilities.DataTypes.StackTraceExtensions.GetMethods(System.Collections.Generic.IEnumerable{System.Diagnostics.StackFrame},System.Reflection.Assembly[])">
            <summary>
            Gets the methods involved in the individual frames
            </summary>
            <param name="Frames">Frames to get the methods from</param>
            <param name="ExcludedAssemblies">Excludes methods from the specified assemblies</param>
            <returns>The list of methods involved</returns>
        </member>
        <member name="T:Utilities.DataTypes.StreamExtensions">
            <summary>
            Extension methods for Streams
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.StreamExtensions.ReadAll(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Takes all of the data in the stream and returns it as a string
            </summary>
            <param name="Input">Input stream</param>
            <param name="EncodingUsing">
            Encoding that the string should be in (defaults to UTF8)
            </param>
            <returns>A string containing the content of the stream</returns>
        </member>
        <member name="M:Utilities.DataTypes.StreamExtensions.ReadAllBinary(System.IO.Stream)">
            <summary>
            Takes all of the data in the stream and returns it as an array of bytes
            </summary>
            <param name="Input">Input stream</param>
            <returns>A byte array</returns>
        </member>
        <member name="T:Utilities.DataTypes.StringCase">
            <summary>
            What sort of string capitalization should be used?
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringCase.SentenceCapitalize">
            <summary>
            Sentence capitalization
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringCase.FirstCharacterUpperCase">
            <summary>
            First character upper case
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringCase.TitleCase">
            <summary>
            Title case
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.StringCompare">
            <summary>
            What type of string comparison are we doing?
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringCompare.CreditCard">
            <summary>
            Is this a credit card number?
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringCompare.Anagram">
            <summary>
            Is this an anagram?
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringCompare.Unicode">
            <summary>
            Is this Unicode
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.StringFilter">
            <summary>
            Predefined filters
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringFilter.Alpha">
            <summary>
            Alpha characters
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringFilter.Numeric">
            <summary>
            Numeric characters
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringFilter.FloatNumeric">
            <summary>
            Numbers with period, basically allows for decimal point
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.StringFilter.ExtraSpaces">
            <summary>
            Multiple spaces
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.StringExtensions">
            <summary>
            String and StringBuilder extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Does an AppendFormat and then an AppendLine on the StringBuilder
            </summary>
            <param name="Builder">Builder object</param>
            <param name="Format">Format string</param>
            <param name="Objects">Objects to format</param>
            <returns>The StringBuilder passed in</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Center(System.String,System.Int32,System.String)">
            <summary>
            Centers the input string (if it's longer than the length) and pads it using the padding string
            </summary>
            <param name="Input"></param>
            <param name="Length"></param>
            <param name="Padding"></param>
            <returns>The centered string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Encode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts a string to a string of another encoding
            </summary>
            <param name="Input">input string</param>
            <param name="OriginalEncodingUsing">
            The type of encoding the string is currently using (defaults to ASCII)
            </param>
            <param name="EncodingUsing">
            The type of encoding the string is converted into (defaults to UTF8)
            </param>
            <returns>string of the byte array</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts base 64 string based on the encoding passed in
            </summary>
            <param name="Input">Input string</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>string in the encoding format</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.FromBase64(System.String)">
            <summary>
            Converts base 64 string to a byte array
            </summary>
            <param name="Input">Input string</param>
            <returns>A byte array equivalent of the base 64 string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Is(System.String,Utilities.DataTypes.StringCompare)">
            <summary>
            Is this value of the specified type
            </summary>
            <param name="Value">Value to compare</param>
            <param name="ComparisonType">Comparison type</param>
            <returns>True if it is of the type specified, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Is(System.String,System.String,Utilities.DataTypes.StringCompare)">
            <summary>
            Is this value of the specified type
            </summary>
            <param name="Value1">Value 1 to compare</param>
            <param name="Value2">Value 2 to compare</param>
            <param name="ComparisonType">Comparison type</param>
            <returns>True if it is of the type specified, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Keep(System.String,System.String)">
            <summary>
            Removes everything that is not in the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Regex expression of text to keep</param>
            <returns>The input text minus everything not in the filter text.</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Keep(System.String,Utilities.DataTypes.StringFilter)">
            <summary>
            Removes everything that is not in the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Predefined filter to use (can be combined as they are flags)</param>
            <returns>The input text minus everything not in the filter text.</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets the first x number of characters from the left hand side
            </summary>
            <param name="Input">Input string</param>
            <param name="Length">x number of characters to return</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.LevenshteinDistance(System.String,System.String)">
            <summary>
            Calculates the Levenshtein distance
            </summary>
            <param name="Value1">Value 1</param>
            <param name="Value2">Value 2</param>
            <returns>The Levenshtein distance</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.MaskLeft(System.String,System.Int32,System.Char)">
            <summary>
            Masks characters to the left ending at a specific character
            </summary>
            <param name="Input">Input string</param>
            <param name="EndPosition">End position (counting from the left)</param>
            <param name="Mask">Mask character to use</param>
            <returns>The masked string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.MaskRight(System.String,System.Int32,System.Char)">
            <summary>
            Masks characters to the right starting at a specific character
            </summary>
            <param name="Input">Input string</param>
            <param name="StartPosition">Start position (counting from the left)</param>
            <param name="Mask">Mask character to use</param>
            <returns>The masked string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.NumberTimesOccurs(System.String,System.String)">
            <summary>
            returns the number of times a string occurs within the text
            </summary>
            <param name="Input">input text</param>
            <param name="Match">The string to match (can be regex)</param>
            <returns>The number of times the string occurs</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Pluralize(System.String,System.Globalization.CultureInfo)">
            <summary>
            Pluralizes a word
            </summary>
            <param name="Word">Word to pluralize</param>
            <param name="Culture">
            Culture info used to pluralize the word (defaults to current culture)
            </param>
            <returns>The word pluralized</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Remove(System.String,System.String)">
            <summary>
            Removes everything that is in the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Regex expression of text to remove</param>
            <returns>Everything not in the filter text.</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Remove(System.String,Utilities.DataTypes.StringFilter)">
            <summary>
            Removes everything that is in the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Predefined filter to use (can be combined as they are flags)</param>
            <returns>Everything not in the filter text.</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Replace(System.String,Utilities.DataTypes.StringFilter,System.String)">
            <summary>
            Replaces everything that is in the filter text with the value specified.
            </summary>
            <param name="Input">Input text</param>
            <param name="Value">Value to fill in</param>
            <param name="Filter">Predefined filter to use (can be combined as they are flags)</param>
            <returns>The input text with the various items replaced</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses a string
            </summary>
            <param name="Input">Input string</param>
            <returns>The reverse of the input string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets the last x number of characters from the right hand side
            </summary>
            <param name="Input">Input string</param>
            <param name="Length">x number of characters to return</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.Singularize(System.String,System.Globalization.CultureInfo)">
            <summary>
            Singularizes a word
            </summary>
            <param name="Word">Word to singularize</param>
            <param name="Culture">
            Culture info used to singularize the word (defaults to current culture)
            </param>
            <returns>The word singularized</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.StripIllegalXML(System.String)">
            <summary>
            Strips illegal characters for XML content
            </summary>
            <param name="Content">Content</param>
            <returns>The stripped string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.StripLeft(System.String,System.String)">
            <summary>
            Strips out any of the characters specified starting on the left side of the input string
            (stops when a character not in the list is found)
            </summary>
            <param name="Input">Input string</param>
            <param name="Characters">Characters to strip (defaults to a space)</param>
            <returns>The Input string with specified characters stripped out</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.StripRight(System.String,System.String)">
            <summary>
            Strips out any of the characters specified starting on the right side of the input
            string (stops when a character not in the list is found)
            </summary>
            <param name="Input">Input string</param>
            <param name="Characters">Characters to strip (defaults to a space)</param>
            <returns>The Input string with specified characters stripped out</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to a byte array
            </summary>
            <param name="Input">input string</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>the byte array representing the string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.ToString(System.String,System.Base64FormattingOptions,System.Text.Encoding)">
            <summary>
            Converts from the specified encoding to a base 64 string
            </summary>
            <param name="Input">Input string</param>
            <param name="Options">Base 64 formatting options</param>
            <param name="OriginalEncodingUsing">
            The type of encoding the string is using (defaults to UTF8)
            </param>
            <returns>Bas64 string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.ToString(System.String,Utilities.DataTypes.StringCase)">
            <summary>
            Formats the string based on the capitalization specified
            </summary>
            <param name="Input">Input string</param>
            <param name="Case">Capitalization type to use</param>
            <returns>Capitalizes the string based on the case specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.ToString(System.String,System.String,Utilities.DataTypes.Formatters.Interfaces.IStringFormatter)">
            <summary>
            Formats a string based on a format string passed in. The default formatter uses the
            following format: # = digits @ = alpha characters \ = escape char
            </summary>
            <param name="Input">Input string</param>
            <param name="Format">Format of the output string</param>
            <param name="Provider">String formatter provider (defaults to GenericStringFormatter)</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.ToString(System.String,System.Object,System.String,System.String)">
            <summary>
            Formats a string based on the object's properties
            </summary>
            <param name="Input">Input string</param>
            <param name="Object">Object to use to format the string</param>
            <param name="StartSeperator">
            Seperator character/string to use to describe the start of the property name
            </param>
            <param name="EndSeperator">
            Seperator character/string to use to describe the end of the property name
            </param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.ToString(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Formats a string based on the key/value pairs that are sent in
            </summary>
            <param name="Input">Input string</param>
            <param name="Pairs">Key/value pairs. Replaces the key with the corresponding value.</param>
            <returns>The string after the changes have been made</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringExtensions.ToString(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Uses a regex to format the input string
            </summary>
            <param name="Input">Input string</param>
            <param name="Format">Regex string used to</param>
            <param name="OutputFormat">Output format</param>
            <param name="Options">Regex options</param>
            <returns>The input string formatted by using the regex string</returns>
        </member>
        <member name="T:Utilities.DataTypes.TimeSpanExtensions">
            <summary>
            TimeSpan extension methods
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.TimeSpanExtensions.Average(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Averages a list of TimeSpans
            </summary>
            <param name="List">List of TimeSpans</param>
            <returns>The average value</returns>
        </member>
        <member name="M:Utilities.DataTypes.TimeSpanExtensions.DaysRemainder(System.TimeSpan)">
            <summary>
            Days in the TimeSpan minus the months and years
            </summary>
            <param name="Span">TimeSpan to get the days from</param>
            <returns>The number of days minus the months and years that the TimeSpan has</returns>
        </member>
        <member name="M:Utilities.DataTypes.TimeSpanExtensions.Months(System.TimeSpan)">
            <summary>
            Months in the TimeSpan
            </summary>
            <param name="Span">TimeSpan to get the months from</param>
            <returns>The number of months that the TimeSpan has</returns>
        </member>
        <member name="M:Utilities.DataTypes.TimeSpanExtensions.ToStringFull(System.TimeSpan)">
            <summary>
            Converts the input to a string in this format: (Years) years, (Months) months,
            (DaysRemainder) days, (Hours) hours, (Minutes) minutes, (Seconds) seconds
            </summary>
            <param name="Input">Input TimeSpan</param>
            <returns>The TimeSpan as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.TimeSpanExtensions.Years(System.TimeSpan)">
            <summary>
            Years in the TimeSpan
            </summary>
            <param name="Span">TimeSpan to get the years from</param>
            <returns>The number of years that the TimeSpan has</returns>
        </member>
        <member name="T:Utilities.DataTypes.TypeConversionExtensions">
            <summary>
            Extensions converting between types, checking if something is null, etc.
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.TypeConversionExtensions.FormatToString(System.Object,System.String)">
            <summary>
            Calls the object's ToString function passing in the formatting
            </summary>
            <param name="Input">Input object</param>
            <param name="Format">Format of the output string</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Utilities.DataTypes.TypeConversionExtensions.MapTo(System.Type,System.Type)">
            <summary>
            Sets up a mapping between two types
            </summary>
            <param name="LeftType">Left type</param>
            <param name="RightType">Right type</param>
            <returns>The type mapping</returns>
        </member>
        <member name="M:Utilities.DataTypes.TypeConversionExtensions.MapTo``2(``0)">
            <summary>
            Sets up a mapping between two types
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
            <param name="Object">Object to set up mapping for</param>
            <returns>The type mapping</returns>
        </member>
        <member name="M:Utilities.DataTypes.TypeConversionExtensions.MapTo``2(System.Type)">
            <summary>
            Sets up a mapping between two types
            </summary>
            <typeparam name="Left">Left type</typeparam>
            <typeparam name="Right">Right type</typeparam>
            <param name="ObjectType">Object type to set up mapping for</param>
            <returns>The type mapping</returns>
        </member>
        <member name="M:Utilities.DataTypes.TypeConversionExtensions.To``1(System.Data.DataTable,System.Func{``0})">
            <summary>
            Attempts to convert the DataTable to a list of objects
            </summary>
            <typeparam name="T">Type the objects should be in the list</typeparam>
            <param name="Data">DataTable to convert</param>
            <param name="Creator">Function used to create each object</param>
            <returns>The DataTable converted to a list of objects</returns>
        </member>
        <member name="M:Utilities.DataTypes.TypeConversionExtensions.To``2(``0,``1)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="T">Type to convert from</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="Object">Object to convert</param>
            <param name="DefaultValue">
            Default value to return if there is an issue or it can't be converted
            </param>
            <returns>
            The object converted to the other type or the default value if there is an error or
            can't be converted
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.TypeConversionExtensions.To``1(``0,System.Type,System.Object)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="T">Type to convert from</typeparam>
            <param name="ResultType">Result type</param>
            <param name="Object">Object to convert</param>
            <param name="DefaultValue">
            Default value to return if there is an issue or it can't be converted
            </param>
            <returns>
            The object converted to the other type or the default value if there is an error or
            can't be converted
            </returns>
        </member>
        <member name="T:Utilities.DataTypes.CharIs">
            <summary>
            What type of character is this
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.WhiteSpace">
            <summary>
            White space
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Upper">
            <summary>
            Upper case
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Surrogate">
            <summary>
            Surrogate
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Punctuation">
            <summary>
            Punctuation
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.LowSurrogate">
            <summary>
            Low surrogate
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Lower">
            <summary>
            Lower
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.LetterOrDigit">
            <summary>
            letter or digit
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Letter">
            <summary>
            Letter
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.HighSurrogate">
            <summary>
            High surrogate
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Digit">
            <summary>
            Digit
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.CharIs.Control">
            <summary>
            Control
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.ValueTypeExtensions">
            <summary>
            Value type extension methods
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ValueTypeExtensions.Is(System.Char,Utilities.DataTypes.CharIs)">
            <summary>
            Is the character of a specific type
            </summary>
            <param name="Value">Value to check</param>
            <param name="CharacterType">Character type</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ValueTypeExtensions.IsUnicode(System.Byte[])">
            <summary>
            Determines if a byte array is unicode
            </summary>
            <param name="Input">Input array</param>
            <returns>True if it's unicode, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ValueTypeExtensions.ToString(System.Byte[],System.Base64FormattingOptions,System.Int32,System.Int32)">
            <summary>
            Converts a byte array into a base 64 string
            </summary>
            <param name="Input">Input array</param>
            <param name="Count">
            Number of bytes starting at the index to convert (use -1 for the entire array starting
            at the index)
            </param>
            <param name="Index">Index to start at</param>
            <param name="Options">Base 64 formatting options</param>
            <returns>The equivalent byte array in a base 64 string</returns>
        </member>
        <member name="M:Utilities.DataTypes.ValueTypeExtensions.ToString(System.Byte[],System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            Converts a byte array to a string
            </summary>
            <param name="Input">input array</param>
            <param name="EncodingUsing">
            The type of encoding the string is using (defaults to UTF8)
            </param>
            <param name="Count">
            Number of bytes starting at the index to convert (use -1 for the entire array starting
            at the index)
            </param>
            <param name="Index">Index to start at</param>
            <returns>string of the byte array</returns>
        </member>
        <member name="T:Utilities.DataTypes.Formatters.GenericStringFormatter">
            <summary>
            Generic string formatter
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Formatters.GenericStringFormatter.AlphaChar">
            <summary>
            Represents alpha characters (defaults to @)
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Formatters.GenericStringFormatter.DigitChar">
            <summary>
            Represents digits (defaults to #)
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Formatters.GenericStringFormatter.EscapeChar">
            <summary>
            Represents the escape character (defaults to \)
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Formats the string
            </summary>
            <param name="format">Format to use</param>
            <param name="arg">Argument object to use</param>
            <param name="formatProvider">Format provider to use</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.Format(System.String,System.String)">
            <summary>
            Formats the string based on the pattern
            </summary>
            <param name="Input">Input string</param>
            <param name="FormatPattern">Format pattern</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.GetFormat(System.Type)">
            <summary>
            Gets the format associated with the type
            </summary>
            <param name="formatType">Format type</param>
            <returns>The appropriate formatter based on the type</returns>
        </member>
        <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.GetMatchingInput(System.String,System.Char,System.Char@)">
            <summary>
            Gets matching input
            </summary>
            <param name="Input">Input string</param>
            <param name="FormatChar">Current format character</param>
            <param name="MatchChar">The matching character found</param>
            <returns>The remainder of the input string left</returns>
        </member>
        <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.IsValid(System.String)">
            <summary>
            Checks if the format pattern is valid
            </summary>
            <param name="FormatPattern">Format pattern</param>
            <returns>Returns true if it's valid, otherwise false</returns>
        </member>
        <member name="T:Utilities.DataTypes.Formatters.Interfaces.IStringFormatter">
            <summary>
            String formatter
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Formatters.Interfaces.IStringFormatter.Format(System.String,System.String)">
            <summary>
            Formats the string based on the pattern
            </summary>
            <param name="Input">Input string</param>
            <param name="FormatPattern">Format pattern</param>
            <returns>The formatted string</returns>
        </member>
        <member name="T:Utilities.DataTypes.ListMapping`2">
            <summary>
            Maps a key to a list of data
            </summary>
            <typeparam name="T1">Key value</typeparam>
            <typeparam name="T2">Type that the list should contain</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ListMapping`2.Count">
            <summary>
            The number of items in the listing
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ListMapping`2.IsReadOnly">
            <summary>
            Not read only
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ListMapping`2.Keys">
            <summary>
            The list of keys within the mapping
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ListMapping`2.Values">
            <summary>
            List that contains the list of values
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ListMapping`2.Items">
            <summary>
            Container holding the data
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ListMapping`2.Item(`0)">
            <summary>
            Gets a list of values associated with a key
            </summary>
            <param name="key">Key to look for</param>
            <returns>The list of values</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Add(`0,`1)">
            <summary>
            Adds an item to the mapping
            </summary>
            <param name="Key">Key value</param>
            <param name="Value">The value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Adds a key value pair
            </summary>
            <param name="item">Key value pair to add</param>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Add(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a list of items to the mapping
            </summary>
            <param name="Key">Key value</param>
            <param name="Value">The values to add</param>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Clear">
            <summary>
            Clears all items from the listing
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Does this contain the key value pairs?
            </summary>
            <param name="item">Key value pair to check</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Contains(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Does the list mapping contain the key value pairs?
            </summary>
            <param name="Key">Key value</param>
            <param name="Values">Value</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Contains(`0,`1)">
            <summary>
            Does the list mapping contain the key value pair?
            </summary>
            <param name="Key">Key</param>
            <param name="Value">Value</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.ContainsKey(`0)">
            <summary>
            Determines if a key exists
            </summary>
            <param name="key">Key to check on</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IEnumerable{`1}}[],System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator for this object</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Remove(`0)">
            <summary>
            Remove a list of items associated with a key
            </summary>
            <param name="key">Key to use</param>
            <returns>True if the key is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Removes a key value pair from the list mapping
            </summary>
            <param name="item">items to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.Remove(`0,`1)">
            <summary>
            Removes a key value pair from the list mapping
            </summary>
            <param name="Key">Key to remove</param>
            <param name="Value">Value to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator for this object</returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.ListMapping`2.TryGetValue(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the value associated with the key
            </summary>
            <param name="Key">Key value</param>
            <param name="Value">The values getting</param>
            <returns>True if it was able to get the value, false otherwise</returns>
        </member>
        <member name="T:Utilities.DataTypes.MathExtensions">
            <summary>
            Extension methods that add basic math functions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Absolute(System.Decimal)">
            <summary>
            Returns the absolute value
            </summary>
            <param name="Value">Value</param>
            <returns>The absolute value</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Absolute(System.Double)">
            <summary>
            Returns the absolute value
            </summary>
            <param name="Value">Value</param>
            <returns>The absolute value</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Absolute(System.Single)">
            <summary>
            Returns the absolute value
            </summary>
            <param name="Value">Value</param>
            <returns>The absolute value</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Absolute(System.Int32)">
            <summary>
            Returns the absolute value
            </summary>
            <param name="Value">Value</param>
            <returns>The absolute value</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Absolute(System.Int64)">
            <summary>
            Returns the absolute value
            </summary>
            <param name="Value">Value</param>
            <returns>The absolute value</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Absolute(System.Int16)">
            <summary>
            Returns the absolute value
            </summary>
            <param name="Value">Value</param>
            <returns>The absolute value</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Exp(System.Double)">
            <summary>
            Returns E raised to the specified power
            </summary>
            <param name="Value">Power to raise E by</param>
            <returns>E raised to the specified power</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Factorial(System.Int32)">
            <summary>
            Calculates the factorial for a number
            </summary>
            <param name="Input">Input value (N!)</param>
            <returns>The factorial specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.GreatestCommonDenominator(System.Int32,System.Int32)">
            <summary>
            Returns the greatest common denominator between value1 and value2
            </summary>
            <param name="Value1">Value 1</param>
            <param name="Value2">Value 2</param>
            <returns>The greatest common denominator if one exists</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.GreatestCommonDenominator(System.Int32,System.UInt32)">
            <summary>
            Returns the greatest common denominator between value1 and value2
            </summary>
            <param name="Value1">Value 1</param>
            <param name="Value2">Value 2</param>
            <returns>The greatest common denominator if one exists</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.GreatestCommonDenominator(System.UInt32,System.UInt32)">
            <summary>
            Returns the greatest common denominator between value1 and value2
            </summary>
            <param name="Value1">Value 1</param>
            <param name="Value2">Value 2</param>
            <returns>The greatest common denominator if one exists</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Log(System.Double)">
            <summary>
            Returns the natural (base e) logarithm of a specified number
            </summary>
            <param name="Value">Specified number</param>
            <returns>The natural logarithm of the specified number</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Log(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a specified number in a specified base
            </summary>
            <param name="Value">Value</param>
            <param name="Base">Base</param>
            <returns>The logarithm of a specified number in a specified base</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of a specified number
            </summary>
            <param name="Value">Value</param>
            <returns>The base 10 logarithm of the specified number</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Gets the median from the list
            </summary>
            <typeparam name="T">The data type of the list</typeparam>
            <param name="Values">The list of values</param>
            <param name="OrderBy">Function used to order the values</param>
            <returns>
            The median value
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Mode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the mode (item that occurs the most) from the list
            </summary>
            <typeparam name="T">The data type of the list</typeparam>
            <param name="Values">The list of values</param>
            <returns>
            The mode value
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Pow(System.Double,System.Double)">
            <summary>
            Raises Value to the power of Power
            </summary>
            <param name="Value">Value to raise</param>
            <param name="Power">Power</param>
            <returns>The resulting value</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Pow(System.Decimal,System.Decimal)">
            <summary>
            Raises Value to the power of Power
            </summary>
            <param name="Value">Value to raise</param>
            <param name="Power">Power</param>
            <returns>The resulting value</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the value to the number of digits
            </summary>
            <param name="Value">Value to round</param>
            <param name="Digits">Digits to round to</param>
            <param name="Rounding">Rounding mode to use</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Sqrt(System.Double)">
            <summary>
            Returns the square root of a value
            </summary>
            <param name="Value">Value to take the square root of</param>
            <returns>The square root</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Sqrt(System.Single)">
            <summary>
            Returns the square root of a value
            </summary>
            <param name="Value">Value to take the square root of</param>
            <returns>The square root</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Sqrt(System.Int32)">
            <summary>
            Returns the square root of a value
            </summary>
            <param name="Value">Value to take the square root of</param>
            <returns>The square root</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Sqrt(System.Int64)">
            <summary>
            Returns the square root of a value
            </summary>
            <param name="Value">Value to take the square root of</param>
            <returns>The square root</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Sqrt(System.Int16)">
            <summary>
            Returns the square root of a value
            </summary>
            <param name="Value">Value to take the square root of</param>
            <returns>The square root</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the standard deviation
            </summary>
            <param name="Values">List of values</param>
            <returns>The standard deviation</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Gets the standard deviation
            </summary>
            <param name="Values">List of values</param>
            <returns>The standard deviation</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the standard deviation
            </summary>
            <param name="Values">List of values</param>
            <returns>The standard deviation</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the standard deviation
            </summary>
            <param name="Values">List of values</param>
            <returns>The standard deviation</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the standard deviation
            </summary>
            <param name="Values">List of values</param>
            <returns>The standard deviation</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Gets the standard deviation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The standard deviation
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Gets the standard deviation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The standard deviation
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Gets the standard deviation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The standard deviation
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Gets the standard deviation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The standard deviation
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Gets the standard deviation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The standard deviation
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <param name="Values">List of values</param>
            <returns>The variance</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <param name="Values">List of values</param>
            <returns>The variance</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <param name="Values">List of values</param>
            <returns>The variance</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <param name="Values">List of values</param>
            <returns>The variance</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <param name="Values">List of values</param>
            <returns>The variance</returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The variance
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The variance
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The variance
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The variance
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.MathExtensions.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Calculates the variance of a list of values
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Values">List of values</param>
            <param name="Selector">The selector.</param>
            <returns>
            The variance
            </returns>
        </member>
        <member name="T:Utilities.DataTypes.PermutationExtensions">
            <summary>
            Permutation extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.PermutationExtensions.Permute``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds all permutations of the items within the list
            </summary>
            <typeparam name="T">Object type in the list</typeparam>
            <param name="Input">Input list</param>
            <returns>The list of permutations</returns>
        </member>
        <member name="T:Utilities.DataTypes.PredicateExtensions">
            <summary>
            Predicate extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.PredicateExtensions.AddToSet``1(System.Predicate{``0},``0[])">
            <summary>
            Adds the given values to the predicate set
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Predicate">Predicate to add to</param>
            <param name="Values">Values to add</param>
            <returns>The resulting predicate set</returns>
        </member>
        <member name="M:Utilities.DataTypes.PredicateExtensions.CartesianProduct``2(System.Predicate{``0},System.Predicate{``1})">
            <summary>
            Treats the predicates as sets and does a cartesian product of them
            </summary>
            <typeparam name="T1">Type 1</typeparam>
            <typeparam name="T2">Type 2</typeparam>
            <param name="Predicate1">Predicate 1</param>
            <param name="Predicate2">Predicate 2</param>
            <returns>The cartesian product</returns>
        </member>
        <member name="M:Utilities.DataTypes.PredicateExtensions.Difference``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Treats the predicates as sets and does a difference
            </summary>
            <typeparam name="T">Data Type</typeparam>
            <param name="Predicate1">Predicate 1</param>
            <param name="Predicate2">Predicate 2</param>
            <returns>The difference of the two predicates</returns>
        </member>
        <member name="M:Utilities.DataTypes.PredicateExtensions.Intersect``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Treats predicates as sets and intersects them together
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Predicate1">Predicate 1</param>
            <param name="Predicate2">Predicate 2</param>
            <returns>The intersected predicate</returns>
        </member>
        <member name="M:Utilities.DataTypes.PredicateExtensions.RelativeComplement``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Treats predicates as sets and returns the relative complement
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Predicate1">Predicate 1</param>
            <param name="Predicate2">Predicate 2</param>
            <returns>The relative complement</returns>
        </member>
        <member name="M:Utilities.DataTypes.PredicateExtensions.RemoveFromSet``1(System.Predicate{``0},``0[])">
            <summary>
            Removes the values from the predicate set
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Predicate">Predicate</param>
            <param name="Values">Values to remove</param>
            <returns>The resulting set</returns>
        </member>
        <member name="M:Utilities.DataTypes.PredicateExtensions.Union``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Treats predicates as sets and unions them together
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Predicate1">Predicate 1</param>
            <param name="Predicate2">Predicate 2</param>
            <returns>The unioned predicate</returns>
        </member>
        <member name="T:Utilities.DataTypes.Fraction">
            <summary>
            Represents a fraction
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Numerator">Numerator</param>
            <param name="Denominator">Denominator</param>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Numerator">Numerator</param>
            <param name="Denominator">Denominator</param>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Constructor
            </summary>
            <param name="Numerator">Numerator</param>
            <param name="Denominator">Denominator</param>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="Numerator">Numerator</param>
            <param name="Denominator">Denominator</param>
        </member>
        <member name="P:Utilities.DataTypes.Fraction.Denominator">
            <summary>
            Denominator of the fraction
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Fraction.Numerator">
            <summary>
            Numerator of the faction
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(Utilities.DataTypes.Fraction)~System.Decimal">
            <summary>
            Converts the fraction to a decimal
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The fraction as a decimal</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(Utilities.DataTypes.Fraction)~System.Double">
            <summary>
            Converts the fraction to a double
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The fraction as a double</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(Utilities.DataTypes.Fraction)~System.Single">
            <summary>
            Converts the fraction to a float
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The fraction as a float</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(System.Double)~Utilities.DataTypes.Fraction">
            <summary>
            Converts the double to a fraction
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The double as a fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(System.Decimal)~Utilities.DataTypes.Fraction">
            <summary>
            Converts the decimal to a fraction
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The decimal as a fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(System.Single)~Utilities.DataTypes.Fraction">
            <summary>
            Converts the float to a fraction
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The float as a fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(System.Int32)~Utilities.DataTypes.Fraction">
            <summary>
            Converts the int to a fraction
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The int as a fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(System.UInt32)~Utilities.DataTypes.Fraction">
            <summary>
            Converts the uint to a fraction
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The uint as a fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Implicit(Utilities.DataTypes.Fraction)~System.String">
            <summary>
            Converts the fraction to a string
            </summary>
            <param name="Fraction">Fraction</param>
            <returns>The fraction as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Subtraction(Utilities.DataTypes.Fraction,Utilities.DataTypes.Fraction)">
            <summary>
            Subtraction
            </summary>
            <param name="First">First fraction</param>
            <param name="Second">Second fraction</param>
            <returns>The subtracted fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_UnaryNegation(Utilities.DataTypes.Fraction)">
            <summary>
            Negation of the fraction
            </summary>
            <param name="First">Fraction to negate</param>
            <returns>The negated fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Inequality(Utilities.DataTypes.Fraction,Utilities.DataTypes.Fraction)">
            <summary>
            Not equals operator
            </summary>
            <param name="First">First item</param>
            <param name="Second">Second item</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Inequality(Utilities.DataTypes.Fraction,System.Double)">
            <summary>
            Not equals operator
            </summary>
            <param name="First">First item</param>
            <param name="Second">Second item</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Inequality(System.Double,Utilities.DataTypes.Fraction)">
            <summary>
            Not equals operator
            </summary>
            <param name="First">First item</param>
            <param name="Second">Second item</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Multiply(Utilities.DataTypes.Fraction,Utilities.DataTypes.Fraction)">
            <summary>
            Multiplication
            </summary>
            <param name="First">First fraction</param>
            <param name="Second">Second fraction</param>
            <returns>The resulting fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Division(Utilities.DataTypes.Fraction,Utilities.DataTypes.Fraction)">
            <summary>
            Division
            </summary>
            <param name="First">First item</param>
            <param name="Second">Second item</param>
            <returns>The divided fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Addition(Utilities.DataTypes.Fraction,Utilities.DataTypes.Fraction)">
            <summary>
            Addition
            </summary>
            <param name="First">First fraction</param>
            <param name="Second">Second fraction</param>
            <returns>The added fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Equality(Utilities.DataTypes.Fraction,Utilities.DataTypes.Fraction)">
            <summary>
            Equals operator
            </summary>
            <param name="First">First item</param>
            <param name="Second">Second item</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Equality(Utilities.DataTypes.Fraction,System.Double)">
            <summary>
            Equals operator
            </summary>
            <param name="First">First item</param>
            <param name="Second">Second item</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.op_Equality(System.Double,Utilities.DataTypes.Fraction)">
            <summary>
            Equals operator
            </summary>
            <param name="First">First item</param>
            <param name="Second">Second item</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.Equals(System.Object)">
            <summary>
            Determines if the fractions are equal
            </summary>
            <param name="obj">object to check</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.GetHashCode">
            <summary>
            Gets the hash code of the fraction
            </summary>
            <returns>The hash code of the fraction</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.Inverse">
            <summary>
            Returns the inverse of the fraction
            </summary>
            <returns>The inverse</returns>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.Reduce">
            <summary>
            Reduces the fraction (finds the greatest common denominator and divides the
            numerator/denominator by it).
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Fraction.ToString">
            <summary>
            Displays the fraction as a string
            </summary>
            <returns>The fraction as a string</returns>
        </member>
        <member name="T:Utilities.DataTypes.Matrix">
            <summary>
            Matrix used in linear algebra
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.#ctor(System.Int32,System.Int32,System.Double[0:,0:])">
            <summary>
            Constructor
            </summary>
            <param name="Width">Width of the matrix</param>
            <param name="Height">Height of the matrix</param>
            <param name="Values">Values to use in the matrix</param>
        </member>
        <member name="P:Utilities.DataTypes.Matrix.Height">
            <summary>
            Height of the matrix
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Matrix.Values">
            <summary>
            Values for the matrix
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Matrix.Width">
            <summary>
            Width of the matrix
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Sets the values of the matrix
            </summary>
            <param name="X">X position</param>
            <param name="Y">Y position</param>
            <returns>the value at a point in the matrix</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Subtraction(Utilities.DataTypes.Matrix,Utilities.DataTypes.Matrix)">
            <summary>
            Subtracts two matrices
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="M2">Matrix 2</param>
            <returns>The result</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_UnaryNegation(Utilities.DataTypes.Matrix)">
            <summary>
            Negates a matrix
            </summary>
            <param name="M1">Matrix 1</param>
            <returns>The result</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Inequality(Utilities.DataTypes.Matrix,Utilities.DataTypes.Matrix)">
            <summary>
            Determines if two matrices are unequal
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="M2">Matrix 2</param>
            <returns>True if they are not equal, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Multiply(Utilities.DataTypes.Matrix,Utilities.DataTypes.Matrix)">
            <summary>
            Multiplies two matrices
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="M2">Matrix 2</param>
            <returns>The result</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Multiply(Utilities.DataTypes.Matrix,System.Double)">
            <summary>
            Multiplies a matrix by a value
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="D">Value to multiply by</param>
            <returns>The result</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Multiply(System.Double,Utilities.DataTypes.Matrix)">
            <summary>
            Multiplies a matrix by a value
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="D">Value to multiply by</param>
            <returns>The result</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Division(Utilities.DataTypes.Matrix,System.Double)">
            <summary>
            Divides a matrix by a value
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="D">Value to divide by</param>
            <returns>The result</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Division(System.Double,Utilities.DataTypes.Matrix)">
            <summary>
            Divides a matrix by a value
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="D">Value to divide by</param>
            <returns>The result</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Addition(Utilities.DataTypes.Matrix,Utilities.DataTypes.Matrix)">
            <summary>
            Adds two matrices
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="M2">Matrix 2</param>
            <returns>The result</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.op_Equality(Utilities.DataTypes.Matrix,Utilities.DataTypes.Matrix)">
            <summary>
            Determines if two matrices are equal
            </summary>
            <param name="M1">Matrix 1</param>
            <param name="M2">Matrix 2</param>
            <returns>True if they are equal, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.Determinant">
            <summary>
            Gets the determinant of a square matrix
            </summary>
            <returns>The determinant of a square matrix</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.Equals(System.Object)">
            <summary>
            Determines if the objects are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>The hash code for the object</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.ToString">
            <summary>
            Gets the string representation of the matrix
            </summary>
            <returns>The matrix as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.Matrix.Transpose">
            <summary>
            Transposes the matrix
            </summary>
            <returns>Returns a new transposed matrix</returns>
        </member>
        <member name="T:Utilities.DataTypes.Set`1">
            <summary>
            Class to be used for sets of data
            </summary>
            <typeparam name="T">Type that the set holds</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="InitialSize">Initial size</param>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.GetIntersection(Utilities.DataTypes.Set{`0},Utilities.DataTypes.Set{`0})">
            <summary>
            Gets the intersection of set 1 and set 2
            </summary>
            <param name="Set1">Set 1</param>
            <param name="Set2">Set 2</param>
            <returns>The intersection of the two sets</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.op_Subtraction(Utilities.DataTypes.Set{`0},Utilities.DataTypes.Set{`0})">
            <summary>
            Removes items from set 2 from set 1
            </summary>
            <param name="Set1">Set 1</param>
            <param name="Set2">Set 2</param>
            <returns>The resulting set</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.op_Inequality(Utilities.DataTypes.Set{`0},Utilities.DataTypes.Set{`0})">
            <summary>
            Determines if the two sets are not equivalent
            </summary>
            <param name="Set1">Set 1</param>
            <param name="Set2">Set 2</param>
            <returns>False if they are, true otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.op_Addition(Utilities.DataTypes.Set{`0},Utilities.DataTypes.Set{`0})">
            <summary>
            Adds two sets together
            </summary>
            <param name="Set1">Set 1</param>
            <param name="Set2">Set 2</param>
            <returns>The joined sets</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.op_Equality(Utilities.DataTypes.Set{`0},Utilities.DataTypes.Set{`0})">
            <summary>
            Determines if the two sets are equivalent
            </summary>
            <param name="Set1">Set 1</param>
            <param name="Set2">Set 2</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.Contains(Utilities.DataTypes.Set{`0})">
            <summary>
            Used to tell if this set contains the other
            </summary>
            <param name="Set">Set to check against</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.Equals(System.Object)">
            <summary>
            Determines if the two sets are equivalent
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.GetHashCode">
            <summary>
            Returns the hash code for the object
            </summary>
            <returns>The hash code for the object</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.Intersect(Utilities.DataTypes.Set{`0})">
            <summary>
            Determines if the sets intersect
            </summary>
            <param name="Set">Set to check against</param>
            <returns>True if they do, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.IsSubset(Utilities.DataTypes.Set{`0})">
            <summary>
            Used to tell if this is a subset of the other
            </summary>
            <param name="Set">Set to check against</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Set`1.ToString">
            <summary>
            Returns the set as a string
            </summary>
            <returns>The set as a string</returns>
        </member>
        <member name="T:Utilities.DataTypes.Vector3">
            <summary>
            Vector class (holds three items)
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="X">X direction</param>
            <param name="Y">Y direction</param>
            <param name="Z">Z direction</param>
        </member>
        <member name="P:Utilities.DataTypes.Vector3.Array">
            <summary>
            Used for converting this to an array and back
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Vector3.Magnitude">
            <summary>
            Returns the magnitude of the vector
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Vector3.X">
            <summary>
            X value
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Vector3.Y">
            <summary>
            Y Value
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Vector3.Z">
            <summary>
            Z value
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.Angle(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Determines the angle between the vectors
            </summary>
            <param name="V1">Vector 1</param>
            <param name="V2">Vector 2</param>
            <returns>Angle between the vectors</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.Distance(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            The distance between two vectors
            </summary>
            <param name="V1">Vector 1</param>
            <param name="V2">Vector 2</param>
            <returns>Distance between the vectors</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.DotProduct(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Does a dot product
            </summary>
            <param name="V1">Vector 1</param>
            <param name="V2">Vector 2</param>
            <returns>a dot product</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.Interpolate(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3,System.Double)">
            <summary>
            Interpolates between the vectors
            </summary>
            <param name="V1">Vector 1</param>
            <param name="V2">Vector 2</param>
            <param name="Control">Percent to move between 1 and 2</param>
            <returns>The interpolated vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_Subtraction(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Subtraction
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_UnaryNegation(Utilities.DataTypes.Vector3)">
            <summary>
            Negation
            </summary>
            <param name="V1">Item 1</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_Inequality(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Not equals
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_Multiply(Utilities.DataTypes.Vector3,System.Double)">
            <summary>
            Multiplication
            </summary>
            <param name="V1">Item 1</param>
            <param name="D">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_Multiply(System.Double,Utilities.DataTypes.Vector3)">
            <summary>
            Multiplication
            </summary>
            <param name="V1">Item 1</param>
            <param name="D">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_Multiply(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Does a cross product
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_Division(Utilities.DataTypes.Vector3,System.Double)">
            <summary>
            Division
            </summary>
            <param name="V1">Item 1</param>
            <param name="D">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_Addition(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Addition
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_LessThan(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Less than
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_LessThanOrEqual(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Less than or equal
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_Equality(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Equals
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_GreaterThan(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Greater than
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.op_GreaterThanOrEqual(Utilities.DataTypes.Vector3,Utilities.DataTypes.Vector3)">
            <summary>
            Greater than or equal
            </summary>
            <param name="V1">Item 1</param>
            <param name="V2">Item 2</param>
            <returns>The resulting vector</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.Equals(System.Object)">
            <summary>
            Determines if the items are equal
            </summary>
            <param name="obj">Object to compare</param>
            <returns>true if they are, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.Normalize">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Vector3.ToString">
            <summary>
            To string function
            </summary>
            <returns>String representation of the vector</returns>
        </member>
        <member name="T:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass">
            <summary>
            Base class used for disposable objects
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass.#ctor">
            <summary>
            Construct
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass.Dispose">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass.Dispose(System.Boolean)">
            <summary>
            Function to override in order to dispose objects
            </summary>
            <param name="Managed">
            If true, managed and unmanaged objects should be disposed. Otherwise unmanaged objects only.
            </param>
        </member>
        <member name="T:Utilities.DataTypes.Patterns.BaseClasses.Singleton`1">
            <summary>
            Base class used for singletons
            </summary>
            <typeparam name="T">The class type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.BaseClasses.Singleton`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Patterns.BaseClasses.Singleton`1.Instance">
            <summary>
            Gets the instance of the singleton
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.Patterns.Factory`2">
            <summary>
            Factory class
            </summary>
            <typeparam name="Key">The "message" type</typeparam>
            <typeparam name="T">The class type that you want created</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.Factory`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Patterns.Factory`2.Constructors">
            <summary>
            List of constructors/initializers
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.Factory`2.Create(`0)">
            <summary>
            Creates an instance associated with the key
            </summary>
            <param name="Key">Registered item</param>
            <returns>The type returned by the initializer</returns>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.Factory`2.Exists(`0)">
            <summary>
            Determines if a key has been registered
            </summary>
            <param name="Key">Key to check</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.Factory`2.Register(`0,`1)">
            <summary>
            Registers an item
            </summary>
            <param name="Key">Item to register</param>
            <param name="Result">The object to be returned</param>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.Factory`2.Register(`0,System.Func{`1})">
            <summary>
            Registers an item
            </summary>
            <param name="Key">Item to register</param>
            <param name="Constructor">The function to call when creating the item</param>
        </member>
        <member name="T:Utilities.DataTypes.Patterns.IFluentInterface">
            <summary>
            Helps in fluent interface design to hide ToString, Equals, and GetHashCode
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.IFluentInterface.Equals(System.Object)">
            <summary>
            Hides equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.IFluentInterface.GetHashCode">
            <summary>
            Hides GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.IFluentInterface.GetType">
            <summary>
            Hides GetType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.Patterns.IFluentInterface.ToString">
            <summary>
            Hides ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Utilities.DataTypes.PriorityQueue`1">
            <summary>
            Helper class that implements a priority queue
            </summary>
            <typeparam name="T">The type of the values placed in the queue</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.PriorityQueue`1.Count">
            <summary>
            The number of items in the listing
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.PriorityQueue`1.IsReadOnly">
            <summary>
            Not read only
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.PriorityQueue`1.Keys">
            <summary>
            The list of keys within the mapping
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.PriorityQueue`1.Values">
            <summary>
            List that contains the list of values
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.PriorityQueue`1.HighestKey">
            <summary>
            Highest value key
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.PriorityQueue`1.Items">
            <summary>
            Container holding the data
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.PriorityQueue`1.Item(System.Int32)">
            <summary>
            Gets a list of values associated with a key
            </summary>
            <param name="key">Key to look for</param>
            <returns>The list of values</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Add(System.Int32,`0)">
            <summary>
            Adds an item to the mapping
            </summary>
            <param name="Key">Key value</param>
            <param name="Value">The value to add</param>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Add(System.Collections.Generic.KeyValuePair{System.Int32,System.Collections.Generic.ICollection{`0}})">
            <summary>
            Adds a key value pair
            </summary>
            <param name="item">Key value pair to add</param>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Add(System.Int32,System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds a list of items to the mapping
            </summary>
            <param name="Key">Key value</param>
            <param name="Value">The values to add</param>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Clear">
            <summary>
            Clears all items from the listing
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Contains(System.Collections.Generic.KeyValuePair{System.Int32,System.Collections.Generic.ICollection{`0}})">
            <summary>
            Does this contain the key value pairs?
            </summary>
            <param name="item">Key value pair to check</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Contains(System.Int32,System.Collections.Generic.ICollection{`0})">
            <summary>
            Does the list mapping contain the key value pairs?
            </summary>
            <param name="Key">Key value</param>
            <param name="Values">Value</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Contains(System.Int32,`0)">
            <summary>
            Does the list mapping contain the key value pair?
            </summary>
            <param name="Key">Key</param>
            <param name="Value">Value</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.ContainsKey(System.Int32)">
            <summary>
            Determines if a key exists
            </summary>
            <param name="key">Key to check on</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.CopyTo(System.Collections.Generic.KeyValuePair{System.Int32,System.Collections.Generic.ICollection{`0}}[],System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator for this object</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Peek">
            <summary>
            Peek at the next thing in the queue
            </summary>
            <returns>The next item in queue or default(T) if it is empty</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Pop">
            <summary>
            Removes an item from the queue and returns it
            </summary>
            <returns>The next item in the queue</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Remove(System.Int32)">
            <summary>
            Remove a list of items associated with a key
            </summary>
            <param name="key">Key to use</param>
            <returns>True if the key is found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Remove(System.Collections.Generic.KeyValuePair{System.Int32,System.Collections.Generic.ICollection{`0}})">
            <summary>
            Removes a key value pair from the list mapping
            </summary>
            <param name="item">items to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.Remove(System.Int32,`0)">
            <summary>
            Removes a key value pair from the list mapping
            </summary>
            <param name="Key">Key to remove</param>
            <param name="Value">Value to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator for this object</returns>
        </member>
        <member name="M:Utilities.DataTypes.PriorityQueue`1.TryGetValue(System.Int32,System.Collections.Generic.ICollection{`0}@)">
            <summary>
            Tries to get the value associated with the key
            </summary>
            <param name="Key">Key value</param>
            <param name="Value">The values getting</param>
            <returns>True if it was able to get the value, false otherwise</returns>
        </member>
        <member name="T:Utilities.DataTypes.RingBuffer`1">
            <summary>
            Implements a ring buffer
            </summary>
            <typeparam name="T">Type of the data it holds</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="MaxCapacity">Max capacity for the circular buffer</param>
            <param name="AllowOverflow">Is overflow allowed (defaults to false)</param>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.AllowOverflow">
            <summary>
            Is overflow allowed?
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.Count">
            <summary>
            Item count for the circular buffer
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.IsReadOnly">
            <summary>
            Is this read only?
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.IsSynchronized">
            <summary>
            Is this synchronized?
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.MaxCapacity">
            <summary>
            Maximum capacity
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.SyncRoot">
            <summary>
            Sync root
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.Buffer">
            <summary>
            Buffer that the circular buffer uses
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.ReadPosition">
            <summary>
            Read position
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.WritePosition">
            <summary>
            Write position
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.RingBuffer`1.Item(System.Int32)">
            <summary>
            Allows getting an item at a specific position in the buffer
            </summary>
            <param name="Position">Position to look at</param>
            <returns>The specified item</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.op_Implicit(Utilities.DataTypes.RingBuffer{`0})~System.String">
            <summary>
            Converts the object to a string
            </summary>
            <param name="Value">Value to convert</param>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Add(`0)">
            <summary>
            Adds an item to the buffer
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a number of items to the buffer
            </summary>
            <param name="Items">Items to add</param>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Add(`0[],System.Int32,System.Int32)">
            <summary>
            Adds a number of items to the buffer
            </summary>
            <param name="buffer">Items to add</param>
            <param name="count">Number of items to add</param>
            <param name="offset">Offset to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Clear">
            <summary>
            Clears the buffer
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Contains(`0)">
            <summary>
            Determines if the buffer contains the item
            </summary>
            <param name="item">Item to check</param>
            <returns>True if the item is present, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the buffer to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Array index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the buffer to an array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="index">Array index to start at</param>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.GetEnumerator">
            <summary>
            Gets the enumerator for the buffer
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the buffer
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Remove">
            <summary>
            Reads the next item from the buffer
            </summary>
            <returns>The next item from the buffer</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Remove(System.Int32)">
            <summary>
            Reads the next X number of items from the buffer
            </summary>
            <param name="Amount">Number of items to return</param>
            <returns>The next X items from the buffer</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Remove(`0)">
            <summary>
            Removes an item from the buffer
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Remove(`0[],System.Int32,System.Int32)">
            <summary>
            Reads the next X number of items and places them in the array passed in
            </summary>
            <param name="array">Array to copy to</param>
            <param name="offset">Offset to start at</param>
            <param name="count">Number of items to read</param>
            <returns>The number of items that were read</returns>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.Skip(System.Int32)">
            <summary>
            Skips ahead in the buffer
            </summary>
            <param name="Count">Number of items in the buffer to skip</param>
        </member>
        <member name="M:Utilities.DataTypes.RingBuffer`1.ToString">
            <summary>
            Returns the buffer as a string
            </summary>
            <returns>The buffer as a string</returns>
        </member>
        <member name="T:Utilities.DataTypes.StringTemplate">
            <summary>
            Acts as a template for a string
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.StringTemplate.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Template">Template</param>
            <param name="KeyEnd">Ending signifier of a key</param>
            <param name="KeyStart">Starting signifier of a key</param>
        </member>
        <member name="M:Utilities.DataTypes.StringTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="Info">Serialization info</param>
            <param name="Context">Streaming context</param>
        </member>
        <member name="P:Utilities.DataTypes.StringTemplate.KeyEnd">
            <summary>
            Ending signifier of a key
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.StringTemplate.KeyStart">
            <summary>
            Beginning signifier of a key
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.StringTemplate.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.StringTemplate.op_Implicit(Utilities.DataTypes.StringTemplate)~System.String">
            <summary>
            Converts the object to a string
            </summary>
            <param name="Value">Value to convert</param>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Utilities.DataTypes.StringTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the ISerializable interface and returns the data needed to serialize the
            dictionary instance
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:Utilities.DataTypes.StringTemplate.ToString">
            <summary>
            Applies the key/values to the template and returns the resulting string
            </summary>
            <returns>The resulting string</returns>
        </member>
        <member name="T:Utilities.DataTypes.Row">
            <summary>
            Holds an individual row
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Row.#ctor(System.Collections.Hashtable,System.String[],System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="ColumnNames">Column names</param>
            <param name="ColumnValues">Column values</param>
            <param name="ColumnNameHash">Column name hash</param>
        </member>
        <member name="P:Utilities.DataTypes.Row.ColumnNameHash">
            <summary>
            Column names
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Row.ColumnNames">
            <summary>
            Column names
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Row.ColumnValues">
            <summary>
            Column values
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Row.Item(System.String)">
            <summary>
            Returns a column based on the column name specified
            </summary>
            <param name="ColumnName">Column name to search for</param>
            <returns>The value specified</returns>
        </member>
        <member name="P:Utilities.DataTypes.Row.Item(System.Int32)">
            <summary>
            Returns a column based on the value specified
            </summary>
            <param name="Column">Column number</param>
            <returns>The value specified</returns>
        </member>
        <member name="T:Utilities.DataTypes.Table">
            <summary>
            Holds tabular information
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.Table.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="ColumnNames">Column names</param>
        </member>
        <member name="M:Utilities.DataTypes.Table.#ctor(System.Data.IDataReader)">
            <summary>
            Constructor
            </summary>
            <param name="Reader">Data reader to get the data from</param>
        </member>
        <member name="P:Utilities.DataTypes.Table.ColumnNameHash">
            <summary>
            Column Name hash table
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Table.ColumnNames">
            <summary>
            Column names for the table
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Table.Rows">
            <summary>
            Rows within the table
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Table.Item(System.Int32)">
            <summary>
            Gets a specific row
            </summary>
            <param name="RowNumber">Row number</param>
            <returns>The row specified</returns>
        </member>
        <member name="M:Utilities.DataTypes.Table.AddRow(System.Object[])">
            <summary>
            Adds a row using the objects passed in
            </summary>
            <param name="Objects">Objects to create the row from</param>
            <returns>This</returns>
        </member>
        <member name="T:Utilities.DataTypes.TagDictionary`2">
            <summary>
            Dictionary that matches multiple keys to each value
            </summary>
            <typeparam name="Key">Key type</typeparam>
            <typeparam name="Value">Value type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.Count">
            <summary>
            Number of items in the dictionary
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.IsReadOnly">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.Keys">
            <summary>
            Gets the keys found in the dictionary
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.Values">
            <summary>
            Gets the values found in the dictionary
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.Items">
            <summary>
            Items in the dictionary
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.KeyList">
            <summary>
            List of keys that have been entered
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.Item(`0)">
            <summary>
            Gets the values based on a key
            </summary>
            <param name="key">Key to get the values of</param>
            <returns>The values associated with the key</returns>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.Add(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a list of values to the key
            </summary>
            <param name="key">Key</param>
            <param name="value">Values to add</param>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.Add(`1,`0[])">
            <summary>
            Adds a value to the dicionary
            </summary>
            <param name="Value">Value to add</param>
            <param name="Keys">Keys to associate the value with</param>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Adds an item to the dictionary
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.Clear">
            <summary>
            Clears the dictionary
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Determines if the dictionary contains the key/value pair
            </summary>
            <param name="item">item to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if a key is in the dictionary
            </summary>
            <param name="key">Key to check</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IEnumerable{`1}}[],System.Int32)">
            <summary>
            Copies itself to an array
            </summary>
            <param name="array">Array</param>
            <param name="arrayIndex">Array index</param>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.Remove(`0)">
            <summary>
            Removes all items that are associated with a key
            </summary>
            <param name="key">Key</param>
            <returns>Returns true if the key was found, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Removes a specific key/value pair
            </summary>
            <param name="item">item to remove</param>
            <returns>True if it is removed, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.TryGetValue(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Attempts to get the values associated with a key
            </summary>
            <param name="key">Key</param>
            <param name="value">Values associated with a key</param>
            <returns>True if something is returned, false otherwise</returns>
        </member>
        <member name="T:Utilities.DataTypes.TagDictionary`2.TaggedItem`2">
            <summary>
            Holds information about each value
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.TaggedItem`2.#ctor(System.Collections.Generic.IEnumerable{`2},`3)">
            <summary>
            Constructor
            </summary>
            <param name="Keys">Keys</param>
            <param name="Value">Value</param>
        </member>
        <member name="M:Utilities.DataTypes.TagDictionary`2.TaggedItem`2.#ctor(`2,`3)">
            <summary>
            Constructor
            </summary>
            <param name="Key">Key</param>
            <param name="Value">Value</param>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.TaggedItem`2.Keys">
            <summary>
            The list of keys associated with the value
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TagDictionary`2.TaggedItem`2.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.TaskQueue`1">
            <summary>
            Class that helps with running tasks in parallel on a set of objects (that will come in on an
            ongoing basis, think producer/consumer situations)
            </summary>
            <typeparam name="T">Object type to process</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.TaskQueue`1.#ctor(System.Int32,System.Action{`0},System.Action{System.Exception})">
            <summary>
            Constructor
            </summary>
            <param name="Capacity">
            Number of items that are allowed to be processed in the queue at one time
            </param>
            <param name="ProcessItem">Action that is used to process each item</param>
            <param name="HandleError">
            Handles an exception if it occurs (defaults to eating the error)
            </param>
        </member>
        <member name="P:Utilities.DataTypes.TaskQueue`1.IsCanceled">
            <summary>
            Determines if it has been cancelled
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TaskQueue`1.IsComplete">
            <summary>
            Determines if it has completed all tasks
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TaskQueue`1.CancellationToken">
            <summary>
            Token used to signal cancellation
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TaskQueue`1.HandleError">
            <summary>
            Called when an exception occurs when processing the queue
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TaskQueue`1.ProcessItem">
            <summary>
            Action used to process an individual item in the queue
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.TaskQueue`1.Tasks">
            <summary>
            Group of tasks that the queue uses
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.TaskQueue`1.Cancel(System.Boolean)">
            <summary>
            Cancels the queue from processing
            </summary>
            <param name="Wait">
            Determines if the function should wait for the tasks to complete before returning
            </param>
        </member>
        <member name="M:Utilities.DataTypes.TaskQueue`1.Enqueue(`0)">
            <summary>
            Adds the item to the queue to be processed
            </summary>
            <param name="Item">Item to process</param>
        </member>
        <member name="M:Utilities.DataTypes.TaskQueue`1.Dispose(System.Boolean)">
            <summary>
            Disposes of the objects
            </summary>
            <param name="disposing">
            True to dispose of all resources, false only disposes of native resources
            </param>
        </member>
        <member name="M:Utilities.DataTypes.TaskQueue`1.Process">
            <summary>
            Processes the queue
            </summary>
        </member>
        <member name="T:Utilities.DataTypes.ConcurrentBagExtensions">
            <summary>
            ConcurrentBag extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.Add``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a list of items to the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to add</param>
            <returns>The collection with the added items</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.Add``1(System.Collections.Concurrent.ConcurrentBag{``0},``0[])">
            <summary>
            Adds a list of items to the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to add</param>
            <returns>The collection with the added items</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.AddAndReturn``1(System.Collections.Concurrent.ConcurrentBag{``0},``0)">
            <summary>
            Adds an item to a list and returns the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Item">Item to add to the collection</param>
            <returns>The original item</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.AddIf``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Predicate{``0},``0[])">
            <summary>
            Adds items to the collection if it passes the predicate test
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">
            Predicate that an item needs to satisfy in order to be added
            </param>
            <returns>True if any are added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.AddIf``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Predicate{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">
            Predicate that an item needs to satisfy in order to be added
            </param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.AddIfUnique``1(System.Collections.Concurrent.ConcurrentBag{``0},``0[])">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.AddIfUnique``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Func{``0,``0,System.Boolean},``0[])">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">
            Predicate used to determine if two values are equal. Return true if they are the same,
            false otherwise
            </param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.AddIfUnique``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.AddIfUnique``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Func{``0,``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">
            Predicate used to determine if two values are equal. Return true if they are the same,
            false otherwise
            </param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.Contains``1(System.Collections.Concurrent.ConcurrentBag{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the bag contains the item specified
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="Collection">The collection.</param>
            <param name="Item">The item.</param>
            <param name="Comparer">The comparer.</param>
            <returns>
            True if the item is present, false otherwise
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.Remove``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items that fit the predicate passed in
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection to remove items from</param>
            <param name="Predicate">Predicate used to determine what items to remove</param>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentBagExtensions.Remove``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all items in the list from the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to remove</param>
            <returns>The collection with the items removed</returns>
        </member>
        <member name="T:Utilities.DataTypes.ConcurrentDictionaryExtensions">
            <summary>
            ConcurrentDictionary extensions
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentDictionaryExtensions.CopyTo``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Collections.Concurrent.ConcurrentDictionary{``0,``1})">
            <summary>
            Copies the dictionary to another dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="Dictionary">The dictionary.</param>
            <param name="Target">The target dictionary.</param>
            <returns>
            This
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentDictionaryExtensions.GetValue``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value from a dictionary or the default value if it isn't found
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="Dictionary">Dictionary to get the value from</param>
            <param name="Key">Key to look for</param>
            <param name="Default">Default value if the key is not found</param>
            <returns>
            The value associated with the key or the default value if the key is not found
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
        </member>
        <member name="M:Utilities.DataTypes.ConcurrentDictionaryExtensions.SetValue``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            Sets the value in a dictionary
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="Dictionary">Dictionary to set the value in</param>
            <param name="Key">Key to look for</param>
            <param name="Value">Value to add</param>
            <returns>The dictionary</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
        </member>
        <member name="T:Utilities.DataTypes.ObservableList`1">
            <summary>
            Observable List class
            </summary>
            <typeparam name="T">Object type that the list holds</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.#ctor">
            <summary>
            Initializes a virtual instance of the <see cref="T:Utilities.DataTypes.ObservableList`1"/> class.
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.#ctor(System.Int32)">
            <summary>
            Initializes a virtual instance of the <see cref="T:Utilities.DataTypes.ObservableList`1"/> class.
            </summary>
            <param name="capacity">
            The number of elements that the virtual list can initially store.
            </param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a virtual instance of the <see cref="T:Utilities.DataTypes.ObservableList`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="F:Utilities.DataTypes.ObservableList`1.collectionChanged_">
            <summary>
            The collection changed
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.ObservableList`1.CollectionChangedDelegates">
            <summary>
            The delegates_
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.ObservableList`1.propertyChanged_">
            <summary>
            The property changed
            </summary>
        </member>
        <member name="F:Utilities.DataTypes.ObservableList`1.PropertyChangedDelegates">
            <summary>
            The property changed delegates
            </summary>
        </member>
        <member name="E:Utilities.DataTypes.ObservableList`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Utilities.DataTypes.ObservableList`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ObservableList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ObservableList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see
            cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.ObservableList`1.BaseList">
            <summary>
            Gets or sets the base list.
            </summary>
            <value>The base list.</value>
        </member>
        <member name="P:Utilities.DataTypes.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="item">
            The object to be added to the end of the <see
            cref="T:System.Collections.Generic.List`1"/>. The value can be null for reference types.
            </param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.ClearDelegates">
            <summary>
            Clears the delegates from the list.
            </summary>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains
            a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see
            cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.Generic.List`1"/> at the
            specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">The index.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.NotifyObjectChanged(System.Object)">
            <summary>
            Notifies the list that an item in the list has been modified.
            </summary>
            <param name="itemChanged">The item that was changed.</param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.List`1"/>. The
            value can be null for reference types.
            </param>
            <returns>
            true if <paramref name="item"/> is successfully removed; otherwise, false. This method
            also returns false if <paramref name="item"/> was not found in the <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all.
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.NotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies the collection changed.
            </summary>
            <param name="args">
            The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Utilities.DataTypes.ObservableList`1.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Utilities.DataTypes.Edge`1">
            <summary>
            Edge pointing from vertex source to vertex sink
            </summary>
            <typeparam name="T">Data type of the data</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Edge`1.#ctor(Utilities.DataTypes.Vertex{`0},Utilities.DataTypes.Vertex{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.Edge`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="sink">The sink.</param>
        </member>
        <member name="P:Utilities.DataTypes.Edge`1.Sink">
            <summary>
            Gets the sink vertex.
            </summary>
            <value>The sink vertex.</value>
        </member>
        <member name="P:Utilities.DataTypes.Edge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value>The source vertex</value>
        </member>
        <member name="M:Utilities.DataTypes.Edge`1.Remove">
            <summary>
            Removes this edge from the sink and source vertices.
            </summary>
            <returns>This</returns>
        </member>
        <member name="T:Utilities.DataTypes.Graph`1">
            <summary>
            Class used to represent a graph
            </summary>
            <typeparam name="T">The data type stored in the graph</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Graph`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.Graph`1"/> class.
            </summary>
        </member>
        <member name="P:Utilities.DataTypes.Graph`1.Vertices">
            <summary>
            Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="M:Utilities.DataTypes.Graph`1.AddEdge(Utilities.DataTypes.Vertex{`0},Utilities.DataTypes.Vertex{`0})">
            <summary>
            Adds the edge.
            </summary>
            <param name="source">The source.</param>
            <param name="sink">The sink.</param>
            <returns>The new edge</returns>
        </member>
        <member name="M:Utilities.DataTypes.Graph`1.AddVertex(`0)">
            <summary>
            Adds the vertex.
            </summary>
            <param name="data">The data.</param>
            <returns>The new vertex</returns>
        </member>
        <member name="M:Utilities.DataTypes.Graph`1.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns>A copy of this graph</returns>
        </member>
        <member name="M:Utilities.DataTypes.Graph`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Utilities.DataTypes.Graph`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:Utilities.DataTypes.Graph`1.RemoveVertex(Utilities.DataTypes.Vertex{`0})">
            <summary>
            Removes the vertex.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>This</returns>
        </member>
        <member name="T:Utilities.DataTypes.Vertex`1">
            <summary>
            Vertex within the graph
            </summary>
            <typeparam name="T">Data type saved in the vertex</typeparam>
        </member>
        <member name="M:Utilities.DataTypes.Vertex`1.#ctor(`0,Utilities.DataTypes.Graph{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Utilities.DataTypes.Vertex`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="P:Utilities.DataTypes.Vertex`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Utilities.DataTypes.Vertex`1.IncomingEdges">
            <summary>
            Gets the incoming edges.
            </summary>
            <value>The incoming edges.</value>
        </member>
        <member name="P:Utilities.DataTypes.Vertex`1.OutgoingEdges">
            <summary>
            Gets the outgoing edges.
            </summary>
            <value>The outgoing edges.</value>
        </member>
        <member name="P:Utilities.DataTypes.Vertex`1.Graph">
            <summary>
            Gets or sets the graph.
            </summary>
            <value>The graph.</value>
        </member>
        <member name="M:Utilities.DataTypes.Vertex`1.AddOutgoingEdge(Utilities.DataTypes.Vertex{`0})">
            <summary>
            Adds an outgoing edge to the vertex specified
            </summary>
            <param name="sink">The sink.</param>
            <returns>The new edge</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vertex`1.Remove">
            <summary>
            Removes all edges from this vertex and removes it from the graph.
            </summary>
            <returns>This</returns>
        </member>
        <member name="M:Utilities.DataTypes.Vertex`1.RemoveEdge(Utilities.DataTypes.Edge{`0})">
            <summary>
            Removes the edge.
            </summary>
            <param name="edge">The edge.</param>
            <returns>This</returns>
        </member>
    </members>
</doc>
